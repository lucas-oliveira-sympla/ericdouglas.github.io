<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric Douglas</title>
  <subtitle>Open Source lover ❤</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ericdouglas.github.io/"/>
  <updated>2017-08-27T10:55:50.587Z</updated>
  <id>http://ericdouglas.github.io/</id>
  
  <author>
    <name>Eric Douglas</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Practicing Elixir - or any - programming language</title>
    <link href="http://ericdouglas.github.io/2017/08/24/practicing-the-elixir-language/"/>
    <id>http://ericdouglas.github.io/2017/08/24/practicing-the-elixir-language/</id>
    <published>2017-08-24T17:31:28.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/LsHtF9t.png" alt="algorithm in elixir"></p>
<blockquote>
<p>Image generated on <a href="http://instaco.de/113274" target="_blank" rel="external">Instacode</a> - <a href="https://github.com/ericdouglas/labs/blob/master/hackerrank/algorithms/old-elixir/005-diagonal-difference/005_diagonal_difference.ex" target="_blank" rel="external">algorithm</a></p>
</blockquote>
<p>In this article I’ll show how I’m learning/practicing Elixir, but the steps showed here aim to be valid for any new language one want to learn/practice.</p>
<p>The steps are basically:</p>
<ol>
<li>Understand the pros and cons of the language</li>
<li>Familiarize with the syntax and semantic of the language</li>
<li>Learn some|enough constructs to start expressing yourself in the language</li>
<li>Practice the acquired knowledge resolving some algorithm challenges</li>
<li>Return to step 3</li>
</ol>
<p>I read the <a href="https://elixir-lang.org/getting-started/introduction.html" target="_blank" rel="external">Elixir guides</a> in chunks and started to practice alongside on <a href="https://www.hackerrank.com/domains/algorithms/warmup" target="_blank" rel="external">HackerRank</a> to really internalize what I was learning.</p>
<p>I’m liking this approach very much so here are some tips that are not so obvious on how you can have some fun while learning a new programming language.</p>
<h2 id="Why-algorithms"><a href="#Why-algorithms" class="headerlink" title="Why algorithms?"></a>Why algorithms?</h2><p>Because this kind of problem is an interesting way to put yourself searching all the API of the language in order to solve the challenge in the more elegant/concise way you currently can.</p>
<p>Since some challenges may not be so common, you can end up learning new tricks that will help you on your daily routine as well.</p>
<h2 id="Write-tests"><a href="#Write-tests" class="headerlink" title="Write tests"></a>Write tests</h2><p>Test-driven development is a <a href="https://elixirforum.com/t/bdd-tdd-criticized/759" target="_blank" rel="external">polemic topic</a> but this scenario (algorithms) is one that you can have real benefits of such approach.</p>
<p>It will help you test your algorithm much faster and precisely, with almost no effort. You just need to run one command.</p>
<p>In the end of the article I’ll solve an algorithm with you so we’ll see how to handle this task.</p>
<h2 id="Backup-your-algorithms-somewhere"><a href="#Backup-your-algorithms-somewhere" class="headerlink" title="Backup your algorithms somewhere"></a>Backup your algorithms somewhere</h2><p>Don’t keep your solutions only in the site you are using to test your knowledge. One reason to develop everything on your machine is to start from the day zero to have a real experience with all the working environment you will inevitable face if you start to create more ambitious programs in that new language.</p>
<p>[GitHub | BitBucket | GitLab] are great places to store your work so you can also easily access it if needed.</p>
<p>Personally, I always search code I put there to remember some aspect of the tool I’m currently using that I forgot. <strong>It’s very helpful!</strong></p>
<h2 id="Blocks-of-theory-and-practice"><a href="#Blocks-of-theory-and-practice" class="headerlink" title="Blocks of theory and practice"></a>Blocks of theory and practice</h2><p>Another useful tip is: put some milestones in your study so after read X chapters of a book or Y pages on the documentation, you will solve N exercises.</p>
<p>Example:</p>
<ul>
<li>After each chapter of <code>&lt;Book&gt;</code> that I read, I’ll solve 3 exercises on <code>&lt;code challenge site&gt;</code></li>
</ul>
<p>It’s also useful take some notes while reading your resources, so you can read it after you finish the exercises. The flux will be:</p>
<ol>
<li>Theory</li>
<li>Exercises</li>
<li>Review annotations</li>
</ol>
<h2 id="Let’s-code"><a href="#Let’s-code" class="headerlink" title="Let’s code!"></a>Let’s code!</h2><p>Now we’ll solve the last exercise in the warmup section of HackerRank.</p>
<p>I chose this exercise - <a href="https://www.hackerrank.com/challenges/time-conversion" target="_blank" rel="external">Time Conversion</a> - because looking the statistics, it’s the hardest in that section but using Elixir to solve this end up being really easy.</p>
<p>Since we are using a TDD approach, let’s first write our tests.</p>
<blockquote>
<p><strong><a href="https://github.com/ericdouglas/labs/tree/master/hackerrank/algorithms/old-elixir/010-time-conversion" target="_blank" rel="external">You can check the final source code here</a></strong></p>
</blockquote>
<h2 id="Test-Setup"><a href="#Test-Setup" class="headerlink" title="Test Setup"></a>Test Setup</h2><p>Elixir has a built-in test tool called <a href="https://hexdocs.pm/ex_unit/ExUnit.html" target="_blank" rel="external">ExUnit</a>, so our work here is pretty minimal.</p>
<p>Let’s create a file called <code>time_conversion_test.exs</code>.</p>
<p>After this, put the following code in such file to have the basic setup in place:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">ExUnit.start()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">TimeConversionTest</span></span> <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> ExUnit.Case</div><div class="line"></div><div class="line">  test <span class="string">"the truth"</span> <span class="keyword">do</span></div><div class="line">    assert <span class="number">1</span> == <span class="number">1</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>It’s done! :)</p>
<p>Go to your terminal and type <code>elixir time_conversion_test.exs</code>. You will se the following:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&gt; elixir time_conversion_test.exs</div><div class="line"></div><div class="line">.</div><div class="line"></div><div class="line">Finished <span class="keyword">in</span> <span class="number">0.08</span> seconds (<span class="number">0.07</span>s <span class="keyword">on</span> load, <span class="number">0.01</span>s <span class="keyword">on</span> tests)</div><div class="line"><span class="number">1</span> test, <span class="number">0</span> failures</div><div class="line"></div><div class="line">Randomized <span class="keyword">with</span> seed <span class="number">501932</span></div></pre></td></tr></table></figure>
<p>Now you verified the test tool is working, let’s write all tests we need for this algorithm.</p>
<p>You can already import the module we will actually test, so add <code>import TimeConversion</code> above the <code>test</code> case.</p>
<blockquote>
<p><strong>Important:</strong> since you are importing a module from another file, you will need to compile such file every time before you run your tests in order to get the last version of it. We’ll see how to use a tool to automate such task below. For now, to compile your code you need to run <code>elixirc name_of_file.ex</code>. Only the module/file where the algorithm is created needs to be compiled. You don’t need to compile test files!</p>
</blockquote>
<p>We will test every <em>hour</em> and <em>hour and half</em> to assure our program works in all cases. Your final test file should looks like this:</p>
<blockquote>
<p>The <code>main</code> function you will see is actually the <code>main</code> function from the <code>TimeConversion</code> module we will write next. Since we imported it, we can use the <code>main</code> function directly.</p>
<p>If you prefer, you can use <code>TimeConversion.main()</code> without import <code>TimeConversion</code> as well.</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">ExUnit.start()</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">TimeConversionTest</span></span> <span class="keyword">do</span></div><div class="line">  <span class="keyword">use</span> ExUnit.Case</div><div class="line">  import TimeConversion</div><div class="line"></div><div class="line">  test <span class="string">"Convert 12-hour time to 24-hour format"</span> <span class="keyword">do</span></div><div class="line">    assert main(<span class="string">"12:00:00AM"</span>) == <span class="string">"00:00:00"</span></div><div class="line">    assert main(<span class="string">"12:33:11AM"</span>) == <span class="string">"00:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"01:00:00AM"</span>) == <span class="string">"01:00:00"</span></div><div class="line">    assert main(<span class="string">"01:33:11AM"</span>) == <span class="string">"01:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"02:00:00AM"</span>) == <span class="string">"02:00:00"</span></div><div class="line">    assert main(<span class="string">"02:33:11AM"</span>) == <span class="string">"02:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"03:00:00AM"</span>) == <span class="string">"03:00:00"</span></div><div class="line">    assert main(<span class="string">"03:33:11AM"</span>) == <span class="string">"03:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"04:00:00AM"</span>) == <span class="string">"04:00:00"</span></div><div class="line">    assert main(<span class="string">"04:33:11AM"</span>) == <span class="string">"04:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"05:00:00AM"</span>) == <span class="string">"05:00:00"</span></div><div class="line">    assert main(<span class="string">"05:33:11AM"</span>) == <span class="string">"05:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"06:00:00AM"</span>) == <span class="string">"06:00:00"</span></div><div class="line">    assert main(<span class="string">"06:33:11AM"</span>) == <span class="string">"06:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"07:00:00AM"</span>) == <span class="string">"07:00:00"</span></div><div class="line">    assert main(<span class="string">"07:33:11AM"</span>) == <span class="string">"07:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"08:00:00AM"</span>) == <span class="string">"08:00:00"</span></div><div class="line">    assert main(<span class="string">"08:33:11AM"</span>) == <span class="string">"08:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"09:00:00AM"</span>) == <span class="string">"09:00:00"</span></div><div class="line">    assert main(<span class="string">"09:33:11AM"</span>) == <span class="string">"09:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"10:00:00AM"</span>) == <span class="string">"10:00:00"</span></div><div class="line">    assert main(<span class="string">"10:33:11AM"</span>) == <span class="string">"10:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"11:00:00AM"</span>) == <span class="string">"11:00:00"</span></div><div class="line">    assert main(<span class="string">"11:33:11AM"</span>) == <span class="string">"11:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"12:00:00PM"</span>) == <span class="string">"12:00:00"</span></div><div class="line">    assert main(<span class="string">"12:33:11PM"</span>) == <span class="string">"12:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"01:00:00PM"</span>) == <span class="string">"13:00:00"</span></div><div class="line">    assert main(<span class="string">"01:33:11PM"</span>) == <span class="string">"13:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"02:00:00PM"</span>) == <span class="string">"14:00:00"</span></div><div class="line">    assert main(<span class="string">"02:33:11PM"</span>) == <span class="string">"14:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"03:00:00PM"</span>) == <span class="string">"15:00:00"</span></div><div class="line">    assert main(<span class="string">"03:33:11PM"</span>) == <span class="string">"15:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"04:00:00PM"</span>) == <span class="string">"16:00:00"</span></div><div class="line">    assert main(<span class="string">"04:33:11PM"</span>) == <span class="string">"16:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"05:00:00PM"</span>) == <span class="string">"17:00:00"</span></div><div class="line">    assert main(<span class="string">"05:33:11PM"</span>) == <span class="string">"17:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"06:00:00PM"</span>) == <span class="string">"18:00:00"</span></div><div class="line">    assert main(<span class="string">"06:33:11PM"</span>) == <span class="string">"18:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"07:00:00PM"</span>) == <span class="string">"19:00:00"</span></div><div class="line">    assert main(<span class="string">"07:33:11PM"</span>) == <span class="string">"19:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"08:00:00PM"</span>) == <span class="string">"20:00:00"</span></div><div class="line">    assert main(<span class="string">"08:33:11PM"</span>) == <span class="string">"20:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"09:00:00PM"</span>) == <span class="string">"21:00:00"</span></div><div class="line">    assert main(<span class="string">"09:33:11PM"</span>) == <span class="string">"21:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"10:00:00PM"</span>) == <span class="string">"22:00:00"</span></div><div class="line">    assert main(<span class="string">"10:33:11PM"</span>) == <span class="string">"22:33:11"</span></div><div class="line"></div><div class="line">    assert main(<span class="string">"11:00:00PM"</span>) == <span class="string">"23:00:00"</span></div><div class="line">    assert main(<span class="string">"11:33:11PM"</span>) == <span class="string">"23:33:11"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Now let’s create our algorithm!</p>
<h2 id="I-O-Strategy"><a href="#I-O-Strategy" class="headerlink" title="I/O Strategy"></a>I/O Strategy</h2><p>Since HackerRank pass the input for our algorithm using the stdin (standard input stream) and read our solution from the stdout (standard output stream), a great tip here is to <strong>put that side-effect part outside of your main module</strong>. This will assure you are working in a more functional style/mindset.</p>
<p>The mental model here is:</p>
<ol>
<li>Create a module that will be your solution for the challenge</li>
<li>Pass the necessary input to solve the challenge for the <code>main</code> function in such module</li>
<li>Create helper functions inside your module and pipe then in the <code>main</code> function</li>
<li>Return the answer from the <code>main</code> function and pipe it to the stdout</li>
</ol>
<p>Let’s create our file <code>time_conversion.ex</code> and then configure the basic setup for such approach:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">TimeConversion</span></span> <span class="keyword">do</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(input) <span class="keyword">do</span></div><div class="line">    input</div><div class="line">  <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">input = IO.gets(<span class="string">""</span>) |&gt; String.trim</div><div class="line">TimeConversion.main(input) |&gt; IO.puts</div></pre></td></tr></table></figure>
<p>As you can see, we are passing the input in the end of the file to our <code>main</code> function and piping it to the <code>IO.puts</code> function that will print the result to the console.</p>
<p>Now the last thing you need to do is actually figure out how to solve the problem! :D</p>
<blockquote>
<p>I recommend you to try solve this before see the solution. It’s a very interesting challenge!</p>
</blockquote>
<h2 id="Solving-the-challenge"><a href="#Solving-the-challenge" class="headerlink" title="Solving the challenge"></a>Solving the challenge</h2><p>Personally, I find the final solution for such challenge quite elegant using the pipe operator <code>|&gt;</code> and the pattern matching Elixir give to us.</p>
<p>One interesting point to note as well is that the <code>+</code> operator in Elixir is actually a function so I could use it in the pipeline as <code>Kernel.+()</code>. Really cool!</p>
<p>The final solution:</p>
<blockquote>
<p><strong>Update:</strong> after <a href="https://news.ycombinator.com/item?id=15096942" target="_blank" rel="external">these</a> great suggestions, I refactored the code for the current version you’ll se below. You can see the old version <a href="https://github.com/ericdouglas/labs/commit/670a3fc7ddea5f5bf5dab9ce8a5c717be28f15bf" target="_blank" rel="external">here</a>.</p>
<p>In the current version I removed <code>Kernel.+()</code> and used string interpolation <code>#{}</code> instead.</p>
</blockquote>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">defmodule</span> <span class="title">TimeConversion</span></span> <span class="keyword">do</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(input) <span class="keyword">do</span></div><div class="line">    input |&gt; converter</div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">converter</span></span>(input) <span class="keyword">do</span></div><div class="line">    [hours, minutes, seconds] = String.split(input, <span class="string">":"</span>)</div><div class="line">    period                    = String.slice(seconds, <span class="number">2</span>..<span class="number">3</span>)</div><div class="line">    seconds                   = String.slice(seconds, <span class="number">0</span>..<span class="number">1</span>)</div><div class="line">    formated_hour             = format_hour(period, hours)</div><div class="line"></div><div class="line">    <span class="string">"<span class="subst">#&#123;formated_hour&#125;</span>:<span class="subst">#&#123;minutes&#125;</span>:<span class="subst">#&#123;seconds&#125;</span>"</span></div><div class="line">  <span class="keyword">end</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">format_hour</span></span>(<span class="string">"AM"</span>, <span class="string">"12"</span>), <span class="symbol">do:</span> <span class="string">"00"</span></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">format_hour</span></span>(<span class="string">"AM"</span>, hours), <span class="symbol">do:</span> hours</div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">format_hour</span></span>(<span class="string">"PM"</span>, <span class="string">"12"</span>), <span class="symbol">do:</span> <span class="string">"12"</span></div><div class="line">  <span class="function"><span class="keyword">defp</span> <span class="title">format_hour</span></span>(<span class="string">"PM"</span>, hours), <span class="symbol">do:</span> <span class="string">"<span class="subst">#&#123;String.to_integer(hours) + <span class="number">12</span>&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">input = IO.gets(<span class="string">""</span>) |&gt; String.trim</div><div class="line">TimeConversion.main(input) |&gt; IO.puts</div></pre></td></tr></table></figure>
<h2 id="Why-the-mix-tool"><a href="#Why-the-mix-tool" class="headerlink" title="Why the mix tool?"></a>Why the <code>mix</code> tool?</h2><p>Following the philosophy to use a real environment while practicing a new language, the method showed now is more closely to what you will see in the wild :)</p>
<p><code>mix</code> is a tool to manage your Elixir applications. It can handle project’s dependencies, run your tests, compile your code, and so on.</p>
<p>The great benefit we will have using <code>mix</code> is that it compile our code before run the tests so we don’t need to bother with such task everytime we want to test our algorithm. Quite handy! The dowside is you need to comment the side-effect part of the code in order to achieve such benefit, not a big deal. You can uncomment it when you paste your code on HackerRank.</p>
<h2 id="Using-mix"><a href="#Using-mix" class="headerlink" title="Using mix"></a>Using <code>mix</code></h2><p>To create a new project, type:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mix <span class="keyword">new</span> project_name</div></pre></td></tr></table></figure>
<p>In our case, let’s use <code>mix new elixir_algorithms</code>.</p>
<p>Now you have a basic structure to work upon. We will change where mix run the tests so our test files can stay alongside the actual code they are testing.</p>
<h2 id="Configuring-your-test-setup-again"><a href="#Configuring-your-test-setup-again" class="headerlink" title="Configuring your test setup - again :)"></a>Configuring your test setup - again :)</h2><p><strong>1)</strong> Go to the file <code>mix.exs</code> and add <code>test_paths: [&quot;lib&quot;]</code> in the <code>project</code> function.</p>
<p>Example:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">project</span></span> <span class="keyword">do</span></div><div class="line">  [</div><div class="line">    <span class="symbol">app:</span> <span class="symbol">:kv</span>,</div><div class="line">    <span class="symbol">version:</span> <span class="string">"0.1.0"</span>,</div><div class="line">    <span class="symbol">elixir:</span> <span class="string">"~&gt; 1.5"</span>,</div><div class="line">    <span class="symbol">start_permanent:</span> Mix.env == <span class="symbol">:prod</span>,</div><div class="line">    <span class="symbol">test_paths:</span> [<span class="string">"lib"</span>],</div><div class="line">    <span class="symbol">deps:</span> deps()</div><div class="line">  ]</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure></p>
<p><strong>2)</strong> Put the <code>test_helper.exs</code> file inside the <code>lib</code> folder.</p>
<p><strong>3)</strong> Now you can create all your test files inside the <code>lib</code> folder.</p>
<p>To verify everything is working, run <code>mix test</code>.</p>
<p>Check our project with the new structure <strong><a href="https://github.com/ericdouglas/labs/tree/master/hackerrank/algorithms/elixir_algorithms/lib" target="_blank" rel="external">here</a></strong>.</p>
<blockquote>
<p>That’s it. <strong>Happy coding!</strong></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LsHtF9t.png&quot; alt=&quot;algorithm in elixir&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image generated on &lt;a href=&quot;http://instaco.de/11
    
    </summary>
    
    
      <category term="elixir" scheme="http://ericdouglas.github.io/tags/elixir/"/>
    
      <category term="testing" scheme="http://ericdouglas.github.io/tags/testing/"/>
    
      <category term="tdd" scheme="http://ericdouglas.github.io/tags/tdd/"/>
    
      <category term="algorithms" scheme="http://ericdouglas.github.io/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Basic CLI Postgres Management</title>
    <link href="http://ericdouglas.github.io/2017/08/15/basic-cli-postgres-management/"/>
    <id>http://ericdouglas.github.io/2017/08/15/basic-cli-postgres-management/</id>
    <published>2017-08-15T16:17:43.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p>Let’s learn some basics and “to the point” examples about how to manage our databases in PostgreSQL using the command line.</p>
<blockquote>
<p><strong>obs</strong>: we assume you have postgres installed on your machine. If it is not the case, install it following the instructions <a href="https://www.postgresql.org/download/" target="_blank" rel="external">here</a>.</p>
</blockquote>
<h2 id="Set-Password-for-the-Default-Account"><a href="#Set-Password-for-the-Default-Account" class="headerlink" title="Set Password for the Default Account"></a>Set Password for the Default Account</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">psql postgres</div><div class="line"></div><div class="line">\password postgres</div><div class="line"></div><div class="line"><span class="comment"># type the password</span></div></pre></td></tr></table></figure>
<h2 id="Create-Users"><a href="#Create-Users" class="headerlink" title="Create Users"></a>Create Users</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># connect to postgres</span></div><div class="line">psql postgres</div><div class="line"></div><div class="line"><span class="comment"># see all users</span></div><div class="line">\du</div><div class="line"></div><div class="line">                                    List of roles</div><div class="line">  Role name  |                         Attributes                         | Member of</div><div class="line">-------------+------------------------------------------------------------+-----------</div><div class="line"> ericdouglas | Superuser, Create role, Create DB                          | &#123;&#125;</div><div class="line"> postgres    | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;</div><div class="line"></div><div class="line"><span class="comment"># CREATE ROLE username WITH LOGIN PASSWORD 'quoted password' [OPTIONS];</span></div><div class="line"><span class="comment"># obs: don't forget the semicolon! :)</span></div><div class="line">CREATE ROLE eric WITH LOGIN PASSWORD <span class="string">'somepass'</span>;</div><div class="line"></div><div class="line"><span class="comment"># check if the user was created</span></div><div class="line">\du</div><div class="line"></div><div class="line">                                    List of roles</div><div class="line">  Role name  |                         Attributes                         | Member of</div><div class="line">-------------+------------------------------------------------------------+-----------</div><div class="line"> eric        |                                                            | &#123;&#125;</div><div class="line"> ericdouglas | Superuser, Create role, Create DB                          | &#123;&#125;</div><div class="line"> postgres    | Superuser, Create role, Create DB, Replication, Bypass RLS | &#123;&#125;</div></pre></td></tr></table></figure>
<h2 id="Give-Permissions-to-a-User"><a href="#Give-Permissions-to-a-User" class="headerlink" title="Give Permissions to a User"></a>Give Permissions to a User</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># give permission for a user to create a new database</span></div><div class="line">ALTER ROLE username CREATEDB;</div></pre></td></tr></table></figure>
<h2 id="Create-a-new-Database"><a href="#Create-a-new-Database" class="headerlink" title="Create a new Database"></a>Create a new Database</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># connect to postgres with a "normal" user</span></div><div class="line">psql postgres -U eric</div><div class="line"></div><div class="line"><span class="comment"># Now instead of `postgres=#` appear in the prompt</span></div><div class="line"><span class="comment"># you will se `postgres=&gt;`, indicating you aren't logged with a super user account</span></div><div class="line"></div><div class="line"><span class="comment"># Create the new DB</span></div><div class="line">CREATE DATABASE test_db;</div></pre></td></tr></table></figure>
<h2 id="Give-Permissions-in-a-Database"><a href="#Give-Permissions-in-a-Database" class="headerlink" title="Give Permissions in a Database"></a>Give Permissions in a Database</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">GRANT ALL PRIVILEGES ON DATABASE test_db TO eric;</div><div class="line"></div><div class="line"><span class="comment"># list all dbs</span></div><div class="line">\list <span class="comment"># or \l</span></div><div class="line"></div><div class="line">                                        List of databases</div><div class="line">        Name        |    Owner    | Encoding |   Collate   |    Ctype    |   Access privileges</div><div class="line">--------------------+-------------+----------+-------------+-------------+-----------------------</div><div class="line"> test_db            | eric        | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</div><div class="line">(1 row)</div></pre></td></tr></table></figure>
<h2 id="Connect-to-a-Database"><a href="#Connect-to-a-Database" class="headerlink" title="Connect to a Database"></a>Connect to a Database</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">psql postgres -U eric</div><div class="line"></div><div class="line"><span class="comment"># connect to a DB</span></div><div class="line">\connect test_db <span class="comment"># or \c</span></div><div class="line"><span class="comment"># You are now connected to database "test_db" as user "eric".</span></div><div class="line"></div><div class="line"><span class="comment"># list tables in the currently connected database</span></div><div class="line">\d</div></pre></td></tr></table></figure>
<h2 id="Create-a-table"><a href="#Create-a-table" class="headerlink" title="Create a table"></a>Create a table</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> college (</div><div class="line">  cname <span class="built_in">varchar</span> (<span class="number">128</span>) PRIMARY <span class="keyword">KEY</span>,</div><div class="line">  state <span class="built_in">varchar</span> (<span class="number">2</span>) <span class="keyword">check</span> (state <span class="keyword">in</span> (<span class="string">'CA'</span>, <span class="string">'NY'</span>, <span class="string">'MA'</span>)),</div><div class="line">  enrollment <span class="built_in">int</span></div><div class="line">);</div><div class="line"></div><div class="line">\d college</div></pre></td></tr></table></figure>
<h2 id="Change-Table-Data"><a href="#Change-Table-Data" class="headerlink" title="Change Table Data"></a>Change Table Data</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> college <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="keyword">open</span> bool;</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> college <span class="keyword">ALTER</span> <span class="keyword">COLUMN</span> <span class="keyword">open</span> <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="string">'true'</span>;</div><div class="line"></div><div class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> college <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="keyword">open</span>;</div></pre></td></tr></table></figure>
<h2 id="Deleting-Tables"><a href="#Deleting-Tables" class="headerlink" title="Deleting Tables"></a>Deleting Tables</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> college;</div></pre></td></tr></table></figure>
<h2 id="Inserting-Data"><a href="#Inserting-Data" class="headerlink" title="Inserting Data"></a>Inserting Data</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> college (cname, state, enrollment) <span class="keyword">VALUES</span></div><div class="line">  (<span class="string">'Stanford'</span>, <span class="string">'CA'</span>, <span class="number">15000</span>),</div><div class="line">  (<span class="string">'Berkeley'</span>, <span class="string">'CA'</span>, <span class="number">36000</span>),</div><div class="line">  (<span class="string">'MIT'</span>, <span class="string">'MA'</span>, <span class="number">10000</span>),</div><div class="line">  (<span class="string">'Cornell'</span>, <span class="string">'NY'</span>, <span class="number">21000</span>);</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="https://www.codementor.io/devops/tutorial/getting-started-postgresql-server-mac-osx" target="_blank" rel="external">Getting Started with PostgreSQL on Mac OSX</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-create-remove-manage-tables-in-postgresql-on-a-cloud-server" target="_blank" rel="external">How To Create, Remove, &amp; Manage Tables in PostgreSQL on a Cloud Server</a></li>
<li><a href="https://www.postgresql.org/docs/current/static/dml-insert.html" target="_blank" rel="external">Inserting Data - PostgreSQL Manual</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s learn some basics and “to the point” examples about how to manage our databases in PostgreSQL using the command line.&lt;/p&gt;
&lt;blockquo
    
    </summary>
    
    
      <category term="postgres" scheme="http://ericdouglas.github.io/tags/postgres/"/>
    
      <category term="cli" scheme="http://ericdouglas.github.io/tags/cli/"/>
    
      <category term="relational databases" scheme="http://ericdouglas.github.io/tags/relational-databases/"/>
    
  </entry>
  
  <entry>
    <title>Better Vue File Organization</title>
    <link href="http://ericdouglas.github.io/2017/08/09/better-vue-file-organization/"/>
    <id>http://ericdouglas.github.io/2017/08/09/better-vue-file-organization/</id>
    <published>2017-08-09T23:55:28.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Update 2017-08-10</strong>: after post this article on <a href="https://www.reddit.com/r/vuejs/" target="_blank" rel="external">/r/vue</a>, one person <a href="https://www.reddit.com/r/vuejs/comments/6spt3o/better_vue_file_organization/dlf5drd/" target="_blank" rel="external">commented</a> that we don’t need to pass the context since the function will refer to the context where it is called so now in the end of the article we’ll have an even cleaner way to organize our files!</p>
<hr>
<p>Before we see an alternative way to organize our vue files/components, I must say although I believe it’s a better approach, in fact, there aren’t <em>right</em> or <em>wrong</em> way, we should follow the way we feel more comfortable to work with.</p>
<p>The following piece of code was extracted from the <a href="https://github.com/mrgodhani/rss-reader/blob/master/app/components/partials/sidebar.vue" target="_blank" rel="external">rss-reader</a> project.</p>
<p>First, we’ll see the original file, and after, the proposed way to organize it.</p>
<p><strong>The mental process</strong></p>
<ol>
<li>Put <strong>all</strong> functions in the bottom of the file.</li>
<li>When a function needs to access <code>this</code> (the current context), we should pass it as the last parameter to our functions.</li>
<li>The <code>ctx</code> parameter you will see is an abbreviation to <code>context</code>.</li>
</ol>
<p><strong>Reasons to change</strong></p>
<ol>
<li>Better way to visualize all methods we have in the file.</li>
<li>Easier way to extract a function to another file if/when necessary.</li>
<li>More “functional” style (!?).</li>
</ol>
<p>Let’s see and compare the traditional approach with the suggested/alternative one.</p>
<p><strong>Traditional approach</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Feed <span class="keyword">from</span> <span class="string">'../../helpers/feeds'</span></div><div class="line"><span class="keyword">import</span> Favicon <span class="keyword">from</span> <span class="string">'../../helpers/favicon'</span></div><div class="line"><span class="keyword">import</span> queue <span class="keyword">from</span> <span class="string">'../../helpers/queue'</span></div><div class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'../../helpers/services'</span></div><div class="line"><span class="keyword">import</span> &#123; addArticles, addFeed &#125; <span class="keyword">from</span> <span class="string">'../../vuex/actions'</span></div><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">async</span> <span class="keyword">from</span> <span class="string">'async'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  vuex: &#123;</div><div class="line">    getters: &#123;</div><div class="line">      offline: <span class="function"><span class="params">state</span> =&gt;</span> state.offline,</div><div class="line">      feeds: <span class="function"><span class="params">state</span> =&gt;</span> state.feeds</div><div class="line">    &#125;,</div><div class="line">    actions: &#123;</div><div class="line">      addArticles,</div><div class="line">      addFeed</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  computed: &#123;</div><div class="line">    feedData () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.feeds.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (item.title.length &gt;= <span class="number">20</span>) &#123;</div><div class="line">          item.origtitle = item.title</div><div class="line">        &#125;</div><div class="line">        item.title = _.truncate(item.title, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;)</div><div class="line">        <span class="keyword">return</span> item</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      feedurl: <span class="string">''</span>,</div><div class="line">      alertmessage: <span class="string">''</span>,</div><div class="line">      showModal: <span class="literal">false</span>,</div><div class="line">      processed: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  methods: &#123;</div><div class="line">    allArticles () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">    &#125;,</div><div class="line">    tags () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/tags'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">    &#125;,</div><div class="line">    favourites () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/favourites'</span>&#125;)</div><div class="line">    &#125;,</div><div class="line">    goFeed (title) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/feed/'</span> + title&#125;)</div><div class="line">    &#125;,</div><div class="line">    readArticles () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/read'</span>&#125;)</div><div class="line">    &#125;,</div><div class="line">    unreadArticles () &#123;</div><div class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/unread'</span>&#125;)</div><div class="line">    &#125;,</div><div class="line">    fetchFeed (callback) &#123;</div><div class="line">      <span class="keyword">let</span> feed = <span class="keyword">new</span> Feed(<span class="keyword">this</span>.feedurl)</div><div class="line">      feed.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">if</span> (result === <span class="literal">null</span>) &#123;</div><div class="line">          <span class="keyword">let</span> error = <span class="string">'Sorry. I couldn\'t figure out any RSS feed on this address. Try to find link to RSS feed on that site by yourself and paste it here.'</span></div><div class="line">          callback(error)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          callback(<span class="literal">null</span>, result)</div><div class="line">        &#125;</div><div class="line">      &#125;, err =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;&#125;</div><div class="line">        <span class="keyword">let</span> error = <span class="string">'Sorry. Unfortunately this website is not supported.'</span></div><div class="line">        callback(error)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    checkFeed (data, callback) &#123;</div><div class="line">      service.checkFeed(data.meta.title, count =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">          callback(<span class="literal">null</span>, data)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          callback(<span class="string">'Feed exists'</span>)</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    fetchIcon (data, callback) &#123;</div><div class="line">      <span class="keyword">let</span> favicon = <span class="keyword">new</span> Favicon(data.meta.link)</div><div class="line">      favicon.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> path</div><div class="line">        <span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123;</div><div class="line">          path = queue.queueTask(<span class="string">'favicon'</span>, result)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          path = <span class="literal">null</span></div><div class="line">        &#125;</div><div class="line">        data.meta.favicon = path</div><div class="line">        data.meta.count = data.articles.length</div><div class="line">        callback(<span class="literal">null</span>, data)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    addFeedItem (data, callback) &#123;</div><div class="line">      <span class="keyword">this</span>.addFeed(data.meta, result =&gt; &#123;</div><div class="line">        data.meta = result</div><div class="line">        callback(<span class="literal">null</span>, data)</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line">    addArticleItems (data, callback) &#123;</div><div class="line">      data.articles.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">let</span> htmlFilename = queue.queueTask(<span class="string">'html'</span>, item.link)</div><div class="line">        item.feed = data.meta.title</div><div class="line">        item.feed_id = data.meta._id</div><div class="line">        item.file = htmlFilename</div><div class="line">        item.favicon = data.meta.favicon</div><div class="line">        <span class="keyword">return</span> item</div><div class="line">      &#125;)</div><div class="line">      <span class="keyword">this</span>.addArticles(data.articles)</div><div class="line">      callback(<span class="literal">null</span>, <span class="string">'done'</span>)</div><div class="line">    &#125;,</div><div class="line">    addFeedData () &#123;</div><div class="line">      <span class="keyword">let</span> self = <span class="keyword">this</span></div><div class="line">      <span class="keyword">this</span>.processed = <span class="literal">true</span></div><div class="line">      <span class="keyword">async</span>.waterfall([</div><div class="line">        <span class="keyword">this</span>.fetchFeed,</div><div class="line">        <span class="keyword">this</span>.checkFeed,</div><div class="line">        <span class="keyword">this</span>.fetchIcon,</div><div class="line">        <span class="keyword">this</span>.addFeedItem,</div><div class="line">        <span class="keyword">this</span>.addArticleItems</div><div class="line">      ], (err, result) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span> (!err) &#123;</div><div class="line">          self.processed = <span class="literal">false</span></div><div class="line">          self.showModal = <span class="literal">false</span></div><div class="line">          <span class="keyword">this</span>.feedurl = <span class="string">''</span></div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          self.alert = <span class="literal">true</span></div><div class="line">          self.alertmessage = err</div><div class="line">          self.processed = <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Alternative approach</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Feed <span class="keyword">from</span> <span class="string">'../../helpers/feeds'</span></div><div class="line"><span class="keyword">import</span> Favicon <span class="keyword">from</span> <span class="string">'../../helpers/favicon'</span></div><div class="line"><span class="keyword">import</span> queue <span class="keyword">from</span> <span class="string">'../../helpers/queue'</span></div><div class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'../../helpers/services'</span></div><div class="line"><span class="keyword">import</span> &#123; addArticles, addFeed &#125; <span class="keyword">from</span> <span class="string">'../../vuex/actions'</span></div><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">async</span> <span class="keyword">from</span> <span class="string">'async'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  vuex: &#123;</div><div class="line">    getters: &#123;</div><div class="line">      offline: <span class="function"><span class="params">state</span> =&gt;</span> state.offline,</div><div class="line">      feeds: <span class="function"><span class="params">state</span> =&gt;</span> state.feeds</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    actions: &#123;</div><div class="line">      addArticles,</div><div class="line">      addFeed</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  computed: &#123;</div><div class="line">    feedData() &#123; feedData(<span class="keyword">this</span>) &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      feedurl: <span class="string">''</span>,</div><div class="line">      alertmessage: <span class="string">''</span>,</div><div class="line">      showModal: <span class="literal">false</span>,</div><div class="line">      processed: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  methods: &#123;</div><div class="line">    allArticles() &#123; allArticles(<span class="keyword">this</span>) &#125;,</div><div class="line">    tags() &#123; tags(<span class="keyword">this</span>) &#125;,</div><div class="line">    favourites() &#123; favourites(<span class="keyword">this</span>) &#125;,</div><div class="line">    goFeed() &#123; goFeed(title, <span class="keyword">this</span>) &#125;,</div><div class="line">    readArticles() &#123; readArticles(<span class="keyword">this</span>) &#125;,</div><div class="line">    unreadArticles() &#123; unreadArticles(<span class="keyword">this</span>) &#125;,</div><div class="line">    fetchFeed() &#123; fetchFeed(callback, <span class="keyword">this</span>) &#125;,</div><div class="line">    checkFeed() &#123; checkFeed(data, callback) &#125;,</div><div class="line">    fetchIcon() &#123; fetchIcon (data, callback) &#125;,</div><div class="line">    addFeedItem() &#123; addFeedItem(data, callback, <span class="keyword">this</span>) &#125;,</div><div class="line">    addArticleItems() &#123; addArticleItems(data, callback, <span class="keyword">this</span>) &#125;,</div><div class="line">    addFeedData() &#123; addFeedData(<span class="keyword">this</span>) &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////// Computed Properties</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">feedData</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.feeds.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (item.title.length &gt;= <span class="number">20</span>) &#123;</div><div class="line">      item.origtitle = item.title</div><div class="line">    &#125;</div><div class="line">    item.title = _.truncate(item.title, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;)</div><div class="line">    <span class="keyword">return</span> item</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////// Methods</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allArticles</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/tags'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">favourites</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/favourites'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">goFeed</span>(<span class="params">title, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/feed/'</span> + title&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readArticles</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/read'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unreadArticles</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> ctx.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/unread'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchFeed</span>(<span class="params">callback, ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> feed = <span class="keyword">new</span> Feed(ctx.feedurl)</div><div class="line"></div><div class="line">  feed.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (result === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">let</span> error = <span class="string">'Sorry. I couldn\'t figure out any RSS feed on this address. Try to find link to RSS feed on that site by yourself and paste it here.'</span></div><div class="line">      callback(error)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      callback(<span class="literal">null</span>, result)</div><div class="line">    &#125;</div><div class="line">  &#125;, err =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;&#125;</div><div class="line">    <span class="keyword">let</span> error = <span class="string">'Sorry. Unfortunately this website is not supported.'</span></div><div class="line">    callback(error)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFeed</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  service.checkFeed(data.meta.title, count =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">      callback(<span class="literal">null</span>, data)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      callback(<span class="string">'Feed exists'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchIcon</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> favicon = <span class="keyword">new</span> Favicon(data.meta.link)</div><div class="line">  favicon.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> path</div><div class="line">    <span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123;</div><div class="line">      path = queue.queueTask(<span class="string">'favicon'</span>, result)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      path = <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    data.meta.favicon = path</div><div class="line">    data.meta.count = data.articles.length</div><div class="line">    callback(<span class="literal">null</span>, data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFeedItem</span>(<span class="params">data, callback, ctx</span>) </span>&#123;</div><div class="line">  ctx.addFeed(data.meta, result =&gt; &#123;</div><div class="line">    data.meta = result</div><div class="line">    callback(<span class="literal">null</span>, data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addArticleItems</span>(<span class="params">data, callback, ctx</span>) </span>&#123;</div><div class="line">  data.articles.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> htmlFilename = queue.queueTask(<span class="string">'html'</span>, item.link)</div><div class="line">    item.feed = data.meta.title</div><div class="line">    item.feed_id = data.meta._id</div><div class="line">    item.file = htmlFilename</div><div class="line">    item.favicon = data.meta.favicon</div><div class="line">    <span class="keyword">return</span> item</div><div class="line">  &#125;)</div><div class="line">  ctx.addArticles(data.articles)</div><div class="line">  callback(<span class="literal">null</span>, <span class="string">'done'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFeedData</span>(<span class="params">ctx</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> self = ctx</div><div class="line">  ctx.processed = <span class="literal">true</span></div><div class="line">  <span class="keyword">async</span>.waterfall([</div><div class="line">    ctx.fetchFeed,</div><div class="line">    ctx.checkFeed,</div><div class="line">    ctx.fetchIcon,</div><div class="line">    ctx.addFeedItem,</div><div class="line">    ctx.addArticleItems</div><div class="line">  ], (err, result) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      self.processed = <span class="literal">false</span></div><div class="line">      self.showModal = <span class="literal">false</span></div><div class="line">      ctx.feedurl = <span class="string">''</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      self.alert = <span class="literal">true</span></div><div class="line">      self.alertmessage = err</div><div class="line">      self.processed = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p><strong>Better and cleaner approach</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line"><span class="keyword">import</span> Feed <span class="keyword">from</span> <span class="string">'../../helpers/feeds'</span></div><div class="line"><span class="keyword">import</span> Favicon <span class="keyword">from</span> <span class="string">'../../helpers/favicon'</span></div><div class="line"><span class="keyword">import</span> queue <span class="keyword">from</span> <span class="string">'../../helpers/queue'</span></div><div class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">'../../helpers/services'</span></div><div class="line"><span class="keyword">import</span> &#123; addArticles, addFeed &#125; <span class="keyword">from</span> <span class="string">'../../vuex/actions'</span></div><div class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">'lodash'</span></div><div class="line"><span class="keyword">import</span> <span class="keyword">async</span> <span class="keyword">from</span> <span class="string">'async'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  vuex: &#123;</div><div class="line">    getters: &#123;</div><div class="line">      offline: <span class="function"><span class="params">state</span> =&gt;</span> state.offline,</div><div class="line">      feeds: <span class="function"><span class="params">state</span> =&gt;</span> state.feeds</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    actions: &#123;</div><div class="line">      addArticles,</div><div class="line">      addFeed</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  computed: &#123;</div><div class="line">    feedData</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      feedurl: <span class="string">''</span>,</div><div class="line">      alertmessage: <span class="string">''</span>,</div><div class="line">      showModal: <span class="literal">false</span>,</div><div class="line">      processed: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  methods: &#123;</div><div class="line">    allArticles,</div><div class="line">    tags,</div><div class="line">    favourites,</div><div class="line">    goFeed,</div><div class="line">    readArticles,</div><div class="line">    unreadArticles,</div><div class="line">    fetchFeed,</div><div class="line">    checkFeed,</div><div class="line">    fetchIcon,</div><div class="line">    addFeedItem,</div><div class="line">    addArticleItems,</div><div class="line">    addFeedData</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////// Computed Properties</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">feedData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.feeds.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (item.title.length &gt;= <span class="number">20</span>) &#123;</div><div class="line">      item.origtitle = item.title</div><div class="line">    &#125;</div><div class="line">    item.title = _.truncate(item.title, &#123; <span class="attr">length</span>: <span class="number">20</span> &#125;)</div><div class="line">    <span class="keyword">return</span> item</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">////////// Methods</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allArticles</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tags</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/tags'</span>, <span class="attr">replace</span>: <span class="literal">true</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">favourites</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/favourites'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">goFeed</span>(<span class="params">title</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/feed/'</span> + title&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">readArticles</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/read'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">unreadArticles</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.$route.router.go(&#123;<span class="attr">path</span>: <span class="string">'/article/unread'</span>&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchFeed</span>(<span class="params">callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> feed = <span class="keyword">new</span> Feed(<span class="keyword">this</span>.feedurl)</div><div class="line"></div><div class="line">  feed.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span> (result === <span class="literal">null</span>) &#123;</div><div class="line">      <span class="keyword">let</span> error = <span class="string">'Sorry. I couldn\'t figure out any RSS feed on this address. Try to find link to RSS feed on that site by yourself and paste it here.'</span></div><div class="line">      callback(error)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      callback(<span class="literal">null</span>, result)</div><div class="line">    &#125;</div><div class="line">  &#125;, err =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;&#125;</div><div class="line">    <span class="keyword">let</span> error = <span class="string">'Sorry. Unfortunately this website is not supported.'</span></div><div class="line">    callback(error)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkFeed</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  service.checkFeed(data.meta.title, count =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (count === <span class="number">0</span>) &#123;</div><div class="line">      callback(<span class="literal">null</span>, data)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      callback(<span class="string">'Feed exists'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fetchIcon</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> favicon = <span class="keyword">new</span> Favicon(data.meta.link)</div><div class="line">  favicon.init().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> path</div><div class="line">    <span class="keyword">if</span> (result !== <span class="literal">null</span>) &#123;</div><div class="line">      path = queue.queueTask(<span class="string">'favicon'</span>, result)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      path = <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    data.meta.favicon = path</div><div class="line">    data.meta.count = data.articles.length</div><div class="line">    callback(<span class="literal">null</span>, data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFeedItem</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.addFeed(data.meta, result =&gt; &#123;</div><div class="line">    data.meta = result</div><div class="line">    callback(<span class="literal">null</span>, data)</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addArticleItems</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">  data.articles.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</div><div class="line">    <span class="keyword">let</span> htmlFilename = queue.queueTask(<span class="string">'html'</span>, item.link)</div><div class="line">    item.feed = data.meta.title</div><div class="line">    item.feed_id = data.meta._id</div><div class="line">    item.file = htmlFilename</div><div class="line">    item.favicon = data.meta.favicon</div><div class="line">    <span class="keyword">return</span> item</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">this</span>.addArticles(data.articles)</div><div class="line">  callback(<span class="literal">null</span>, <span class="string">'done'</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addFeedData</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span></div><div class="line">  <span class="keyword">this</span>.processed = <span class="literal">true</span></div><div class="line">  <span class="keyword">async</span>.waterfall([</div><div class="line">    <span class="keyword">this</span>.fetchFeed,</div><div class="line">    <span class="keyword">this</span>.checkFeed,</div><div class="line">    <span class="keyword">this</span>.fetchIcon,</div><div class="line">    <span class="keyword">this</span>.addFeedItem,</div><div class="line">    <span class="keyword">this</span>.addArticleItems</div><div class="line">  ], (err, result) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      self.processed = <span class="literal">false</span></div><div class="line">      self.showModal = <span class="literal">false</span></div><div class="line">      <span class="keyword">this</span>.feedurl = <span class="string">''</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      self.alert = <span class="literal">true</span></div><div class="line">      self.alertmessage = err</div><div class="line">      self.processed = <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
<p>Which one do you prefer? Why? Share your thoughts with us :)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Update 2017-08-10&lt;/strong&gt;: after post this article on &lt;a href=&quot;https://www.reddit.com/r/vuejs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;/
    
    </summary>
    
    
      <category term="vue" scheme="http://ericdouglas.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Installing Elixir and Erlang</title>
    <link href="http://ericdouglas.github.io/2017/06/29/installing-elixir-and-erlang/"/>
    <id>http://ericdouglas.github.io/2017/06/29/installing-elixir-and-erlang/</id>
    <published>2017-06-29T23:45:25.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Installing-asdf"><a href="#Installing-asdf" class="headerlink" title="Installing asdf"></a>Installing asdf</h2><p><a href="https://github.com/asdf-vm/asdf" target="_blank" rel="external">asdf</a> is a <strong>version manager</strong> with support for different languages, what is a really interesting feature.</p>
<p>We will use it to manage the installation of Erlang and Elixir and to stay up to date with such technologies.</p>
<blockquote>
<p><strong>Disclaimer</strong>: since I’m using the Linux Mint OS, all installing instructions will be based on such OS. After each section I’ll point you to the official installation instructions so you can see how to do it for your OS.</p>
</blockquote>
<p>Let’s install asdf!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.3.0</div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">'\n. $HOME/.asdf/asdf.sh'</span> &gt;&gt; ~/.zshrc <span class="comment"># if you use zsh shell</span></div><div class="line"><span class="comment"># OR echo -e '\n. $HOME/.asdf/asdf.sh' &gt;&gt; ~/.bashrc</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> -e <span class="string">'\n. $HOME/.asdf/completions/asdf.bash'</span> &gt;&gt; ~/.zshrc</div><div class="line"><span class="comment"># OR echo -e '\n. $HOME/.asdf/completions/asdf.bash' &gt;&gt; ~/.bashrc</span></div></pre></td></tr></table></figure>
<p>For most plugins, it is good if you have installed the following packages OR their equivalent on your OS:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install automake autoconf libreadline-dev libncurses-dev libssl-dev libyaml-dev libxslt-dev libffi-dev libtool unixodbc-dev</div></pre></td></tr></table></figure>
<p>For a different OS, follow the setup <a href="https://github.com/asdf-vm/asdf#setup" target="_blank" rel="external">here</a>.</p>
<h2 id="Installing-Erlang"><a href="#Installing-Erlang" class="headerlink" title="Installing Erlang"></a>Installing Erlang</h2><p>Now that we have asdf installed, we need to install a <em>asdf plugin</em> for each language we want to have available on our machine.</p>
<p>Let’s install the <a href="https://github.com/asdf-vm/asdf-erlang" target="_blank" rel="external">asdf-erlang</a> plugin and Erlang itself!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install asdf-erlang</span></div><div class="line">asdf plugin-add erlang https://github.com/asdf-vm/asdf-erlang.git</div><div class="line"></div><div class="line"><span class="comment"># Install Erlang</span></div><div class="line">asdf install erlang 20.0</div><div class="line"></div><div class="line"><span class="comment"># Set current version</span></div><div class="line">asdf global erlang 20.0</div><div class="line"></div><div class="line"><span class="comment"># Open other terminal tab</span></div><div class="line"><span class="comment"># Verify if everything went well by</span></div><div class="line"><span class="comment"># Checking the current Erlang installed version</span></div><div class="line">erl -v</div><div class="line"><span class="comment"># Erlang/OTP 20 ...</span></div></pre></td></tr></table></figure>
<p>For more instructions about asdf usage check <a href="https://github.com/asdf-vm/asdf#usage" target="_blank" rel="external">this</a> section.</p>
<h2 id="Installing-Elixir"><a href="#Installing-Elixir" class="headerlink" title="Installing Elixir"></a>Installing Elixir</h2><p>Let’s install the <a href="https://github.com/asdf-vm/asdf-elixir" target="_blank" rel="external">asdf-elixir</a> plugin and Elixir.</p>
<blockquote>
<p>:warning: :warning: :warning:</p>
<p>If you would like to use precompiled binaries built with a more recent OTP, you should append <code>-otp-${OTP_VERSION}</code> to any installable version that can be given to <code>asdf-elixir</code>.</p>
<p>See more about it <a href="https://github.com/asdf-vm/asdf-elixir#elixir-precompiled-versions" target="_blank" rel="external">here</a>.</p>
<p>:warning: :warning: :warning:</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install asdf-elixir</span></div><div class="line">asdf plugin-add elixir https://github.com/asdf-vm/asdf-elixir.git</div><div class="line"></div><div class="line"><span class="comment"># Install Elixir</span></div><div class="line">asdf install elixir 1.5.0-otp-20</div><div class="line"></div><div class="line"><span class="comment"># Set current version</span></div><div class="line">asdf global elixir 1.5.0-otp-20</div><div class="line"></div><div class="line"><span class="comment"># Open other terminal tab</span></div><div class="line"><span class="comment"># Verify if everything went well by</span></div><div class="line"><span class="comment"># Checking the current Elixir installed version</span></div><div class="line">elixir -v</div><div class="line"><span class="comment"># Elixir 1.5.0-otp-20</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Installing-asdf&quot;&gt;&lt;a href=&quot;#Installing-asdf&quot; class=&quot;headerlink&quot; title=&quot;Installing asdf&quot;&gt;&lt;/a&gt;Installing asdf&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://g
    
    </summary>
    
    
      <category term="elixir" scheme="http://ericdouglas.github.io/tags/elixir/"/>
    
      <category term="erlang" scheme="http://ericdouglas.github.io/tags/erlang/"/>
    
      <category term="asdf" scheme="http://ericdouglas.github.io/tags/asdf/"/>
    
      <category term="version management" scheme="http://ericdouglas.github.io/tags/version-management/"/>
    
  </entry>
  
  <entry>
    <title>React Hacker News Client</title>
    <link href="http://ericdouglas.github.io/2016/12/26/react-hacker-news-client/"/>
    <id>http://ericdouglas.github.io/2016/12/26/react-hacker-news-client/</id>
    <published>2016-12-26T20:06:32.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/YxCBqM6.png" alt="Hacker news logo"></p>
<p>For those that want to start building React applications, I highly recommend the beginner friendly book called <a href="https://leanpub.com/the-road-to-learn-react" target="_blank" rel="external">The Road to Learn React</a> by <a href="https://twitter.com/rwieruch" target="_blank" rel="external">Robin Wieruch</a>.</p>
<p>In this book, you will build a simple Hacker News client clone.</p>
<p>To keep the application simple, the author didn’t split all components in its own files, so the code is concentrated in the App.js file.</p>
<p>As an exercise, I created the <strong>react-hn</strong> repository, where I splitted all those components in their own folder/file.</p>
<p>You can check the source code <a href="https://github.com/ericdouglas/react-hn" target="_blank" rel="external">here</a> and the live demo <a href="https://ericdouglas.github.io/react-hn/">here</a>.</p>
<p>Enjoy!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/YxCBqM6.png&quot; alt=&quot;Hacker news logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;For those that want to start building React applications, I high
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Fix Jest/Watchman on Linux</title>
    <link href="http://ericdouglas.github.io/2016/12/20/fix-jest-watchman-on-linux/"/>
    <id>http://ericdouglas.github.io/2016/12/20/fix-jest-watchman-on-linux/</id>
    <published>2016-12-20T09:47:11.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p>If you are trying to run Jest on your Linux machine and getting a weird error about Watchman, you can fix it increasing the number of files that Watchman will be able to… <em>watch</em>!</p>
<p>All you need to do is:</p>
<ol>
<li>Open the file <code>/etc/sysctl.conf</code> E.g. <code>sudo vim /etc/sysctl.conf</code></li>
<li>Add the following lines to it:<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Config to run Jest</span></div><div class="line">fs.inotify.max_user_watches = <span class="number">10485760</span></div><div class="line">fs.<span class="built_in">file</span>-<span class="built_in">max</span> = <span class="number">10485760</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>And that’s it! :D</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you are trying to run Jest on your Linux machine and getting a weird error about Watchman, you can fix it increasing the number of fil
    
    </summary>
    
    
      <category term="jest" scheme="http://ericdouglas.github.io/tags/jest/"/>
    
      <category term="watchman" scheme="http://ericdouglas.github.io/tags/watchman/"/>
    
      <category term="linux" scheme="http://ericdouglas.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Functional Programming Study Plan</title>
    <link href="http://ericdouglas.github.io/2016/12/04/functional-programming-study-plan/"/>
    <id>http://ericdouglas.github.io/2016/12/04/functional-programming-study-plan/</id>
    <published>2016-12-04T09:37:35.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/6WYzdyQ.png" alt="Functional programming study plan"></p>
<p>This study plan was based in the LambdaConf’s <a href="https://twitter.com/lambda_conf/status/803695008100466688" target="_blank" rel="external">Standardized Ladder of Functional Programming</a>. It is a guide more inclined for statically-typed, category-theoretic languages, e.g. Haskell, but can be useful for all people interested in learning functional programming.</p>
<p>The following guide will also work as an index for future posts and/or indication of resources about those respective topics.</p>
<p><strong>Enjoy!</strong></p>
<blockquote>
<p><strong>OBS</strong>: the division in the guide using levels has the only purpose of help one to situate himself/herself in the journey of mastering FP concepts &amp; skills.</p>
</blockquote>
<h2 id="Beginner"><a href="#Beginner" class="headerlink" title="Beginner"></a>Beginner</h2><ul>
<li><strong>CONCEPTS</strong> <ul>
<li>Immutable Data</li>
<li>Second-Order Functions</li>
<li>Constructoring &amp; Destructuring</li>
<li>Function Composition</li>
<li>First-Class Functions &amp; Lambdas</li>
</ul>
</li>
<li><strong>SKILLS</strong> <ul>
<li>Use second-order functions (map, filter, fold) on immutable data structures</li>
<li>Destructure values to access their components</li>
<li>Use data types to represent optionality</li>
<li>Read basic type signatures</li>
<li>Pass lambdas to second-order functions</li>
</ul>
</li>
</ul>
<h2 id="Advanced-Beginner"><a href="#Advanced-Beginner" class="headerlink" title="Advanced Beginner"></a>Advanced Beginner</h2><ul>
<li><strong>CONCEPTS</strong><ul>
<li>Algebraic Data Types</li>
<li>Pattern Matching</li>
<li>Parametric Polymorphism</li>
<li>General Recursion</li>
<li>Type Classes, instances, &amp; Laws</li>
<li>Lower-Order Abstractions (Equal, Semigroup, Monoid, etc)</li>
<li>Referential Transparency &amp; Totality</li>
<li>Higher-Order Functions</li>
<li>Partial-Application, Currying, &amp; Point-Free Style</li>
</ul>
</li>
<li><strong>SKILLS</strong><ul>
<li>Solve problems without nulls, exceptions, or type casts</li>
<li>Process &amp; transform recursive data structures using recursion</li>
<li>Able to use functional programming “in the small”</li>
<li>Write basic monadic code for a concrete monad</li>
<li>Create type class instances for custom data types</li>
<li>Model a business domain with ADTs</li>
<li>Write functions that take and return functions</li>
<li>Reliably identify &amp; isolate pure code from impure code</li>
<li>Avoid introducing unnecessary lambdas &amp; named parameters</li>
</ul>
</li>
</ul>
<h2 id="Intermediate"><a href="#Intermediate" class="headerlink" title="Intermediate"></a>Intermediate</h2><ul>
<li><strong>CONCEPTS</strong><ul>
<li>Generalized Algebraic Data Types</li>
<li>Higher-Kinded Types</li>
<li>Rank-N Types</li>
<li>Folds &amp; Unfolds</li>
<li>Higher-Order abstractions (Category, Functor, Monad)</li>
<li>Basic Optics</li>
<li>Efficient Persistent Data Structures</li>
<li>Existential Types</li>
<li>Embedded DSLs using Combinators</li>
</ul>
</li>
<li><strong>SKILLS</strong><ul>
<li>Able to use functional programming “in the large”</li>
<li>Test code using generators and properties</li>
<li>Write imperative code in a purely functional way through monads</li>
<li>Use popular purely functional libraries to solve business problems</li>
<li>Separate decision from effects</li>
<li>Write a simple custom lawful monad</li>
<li>Write production medium-sized projects</li>
<li>Use lenses &amp; prisms to manipulate data</li>
<li>Simplify types by hiding irrelevant data with existentials</li>
</ul>
</li>
</ul>
<h2 id="Proficient"><a href="#Proficient" class="headerlink" title="Proficient"></a>Proficient</h2><ul>
<li><strong>CONCEPTS</strong><ul>
<li>Codata</li>
<li>(Co)Recursion Schemes</li>
<li>Advanced Optics</li>
<li>Dual Abstractions (Comonad)</li>
<li>Monad Transformers</li>
<li>Free Monads &amp; Extensible Effects</li>
<li>Functional Architecture</li>
<li>Advanced Functors (Exponential, Profunctors, Contravariant)</li>
<li>Embedded DSLs using GADTs, Finally Tagless</li>
<li>Advanced Monads (Continuation, Logic)</li>
<li>Type Families, Functional Dependencies</li>
</ul>
</li>
<li><strong>SKILLS</strong><ul>
<li>Design a minimally-powerful monad transformer stack</li>
<li>Write concurrent and streaming programs</li>
<li>Use purely functional mocking in tests</li>
<li>Use type classes to modularly model different effects</li>
<li>Recognize type patterns &amp; abstract over them</li>
<li>Use functional libraries in novel ways</li>
<li>Use optics to manipulate state</li>
<li>Write custom lawful monad transformers</li>
<li>Use free monads / extensible effects to separate concerns</li>
<li>Encode invariants at the type level</li>
<li>Effectively use FDs / type families to create safer code</li>
</ul>
</li>
</ul>
<h2 id="Expert"><a href="#Expert" class="headerlink" title="Expert"></a>Expert</h2><ul>
<li><strong>CONCEPTS</strong><ul>
<li>High-Performance</li>
<li>Kind Polymorphism</li>
<li>Generic Programming</li>
<li>Type-Level Programming</li>
<li>Dependent-Types, Singleton Types</li>
<li>Category Theory</li>
<li>Graph Reduction</li>
<li>Higher-Order Abstract Syntax</li>
<li>Compiler Design for Functional Languages</li>
<li>Profunctor Optics</li>
</ul>
</li>
<li><strong>SKILLS</strong><ul>
<li>Design a generic, lawful library with broad appeal</li>
<li>Prove properties manually using equational reasoning</li>
<li>Design &amp; implement a new functional programming language</li>
<li>Create novel abstractions with laws</li>
<li>Write distributed systems with certain guarantees</li>
<li>Use proof systems to formally prove properties of code</li>
<li>Create libraries that do not permit invalid states</li>
<li>Use dependent-typing to prove more properties at compile-time</li>
<li>Understand deep relationships between different concepts</li>
<li>Profile, debug, &amp; optimize purely functional code with minimal sacrifices</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/6WYzdyQ.png&quot; alt=&quot;Functional programming study plan&quot;&gt;&lt;/p&gt;
&lt;p&gt;This study plan was based in the LambdaConf’s &lt;
    
    </summary>
    
    
      <category term="functional programming" scheme="http://ericdouglas.github.io/tags/functional-programming/"/>
    
      <category term="study plan" scheme="http://ericdouglas.github.io/tags/study-plan/"/>
    
  </entry>
  
  <entry>
    <title>How To Create a Blog With Hexo</title>
    <link href="http://ericdouglas.github.io/2016/08/21/how-to-create-a-blog-with-hexo/"/>
    <id>http://ericdouglas.github.io/2016/08/21/how-to-create-a-blog-with-hexo/</id>
    <published>2016-08-21T14:38:08.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://pbs.twimg.com/profile_images/476729162707644418/mQZOTo9f.png" alt="Hexo logo"></p>
<p>So you want to write about some cool stuff you are doing but don’t want to waste time configuring a bunch of things? Well, a <strong>really great</strong> solution for this is to use the static site generator <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>. It’s <strong>incredibly simple</strong> how fast you can have a blog up and running with this great tool.</p>
<p><strong>Let’s learn how!</strong></p>
<a id="more"></a>
<h2 id="Installing-Hexo"><a href="#Installing-Hexo" class="headerlink" title="Installing Hexo"></a>Installing Hexo</h2><p><strong>Before</strong> install Hexo, you should have Node and NPM installed in your machine. In order to install Node, I recommend you to use <a href="https://github.com/creationix/nvm" target="_blank" rel="external">nvm</a> to manage your Node &amp; NPM installation.</p>
<p>Now it’s time to install Hexo. You just need to:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-cli -g</div></pre></td></tr></table></figure>
<h2 id="Creating-your-blog"><a href="#Creating-your-blog" class="headerlink" title="Creating your blog"></a>Creating your blog</h2><p>After install Hexo, let’s create our blog with the Hexo CLI tool. To do this, type the following commands in your terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init &lt;blog-name&gt; &amp;&amp; <span class="variable">$_</span></div></pre></td></tr></table></figure>
<p>Replace <code>&lt;blog-name&gt;</code> with the name of the folder where your files will be located.</p>
<blockquote>
<p><code>$_</code> is a shortcut for <code>cd &lt;blog-name&gt;</code></p>
</blockquote>
<h2 id="Finding-and-Installing-a-New-Theme"><a href="#Finding-and-Installing-a-New-Theme" class="headerlink" title="Finding and Installing a New Theme"></a>Finding and Installing a New Theme</h2><p>If you want to change the default theme, you just need to go <a href="https://hexo.io/themes/" target="_blank" rel="external">here</a> and find a new one you prefer.</p>
<p>I’m current using the <a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">NexT</a> theme. I’ll show you how to install this theme, but the procedure is almost equal for all themes.</p>
<p>In the root folder of your blog, type the following command:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</div></pre></td></tr></table></figure>
<p>Now you need to tell Hexo which theme you want to use. To do this you need to open the <code>_config.yml</code> in your root directory and change the <code>theme</code> property value to <code>next</code>.</p>
<h2 id="Hexo-Plugins"><a href="#Hexo-Plugins" class="headerlink" title="Hexo Plugins"></a>Hexo Plugins</h2><p>To generate all files and features that your blog will have (Archive section, RSS Feed, Browsersync, etc) you need to install some additional modules, or hexo plugins. I’m currently using the following modules:</p>
<p><strong>package.json</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">	<span class="string">"hexo"</span>: <span class="string">"^3.1.0"</span>,</div><div class="line">	<span class="string">"hexo-browsersync"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">	<span class="string">"hexo-deployer-git"</span>: <span class="string">"0.0.4"</span>,</div><div class="line">	<span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.4"</span>,</div><div class="line">	<span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.2"</span>,</div><div class="line">	<span class="string">"hexo-generator-feed"</span>: <span class="string">"^1.2.0"</span>,</div><div class="line">	<span class="string">"hexo-generator-index"</span>: <span class="string">"^0.1.2"</span>,</div><div class="line">	<span class="string">"hexo-generator-sitemap"</span>: <span class="string">"^1.1.2"</span>,</div><div class="line">	<span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.1.1"</span>,</div><div class="line">	<span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.1.0"</span>,</div><div class="line">	<span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.2.4"</span>,</div><div class="line">	<span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.0"</span>,</div><div class="line">	<span class="string">"hexo-server"</span>: <span class="string">"^0.1.2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>When we install Hexo, we have by default the following plugins installed:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">	<span class="string">"hexo"</span>: <span class="string">"^3.2.0"</span>,</div><div class="line">	<span class="string">"hexo-generator-archive"</span>: <span class="string">"^0.1.4"</span>,</div><div class="line">	<span class="string">"hexo-generator-category"</span>: <span class="string">"^0.1.3"</span>,</div><div class="line">	<span class="string">"hexo-generator-index"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">	<span class="string">"hexo-generator-tag"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">	<span class="string">"hexo-renderer-ejs"</span>: <span class="string">"^0.2.0"</span>,</div><div class="line">	<span class="string">"hexo-renderer-stylus"</span>: <span class="string">"^0.3.1"</span>,</div><div class="line">	<span class="string">"hexo-renderer-marked"</span>: <span class="string">"^0.2.10"</span>,</div><div class="line">	<span class="string">"hexo-server"</span>: <span class="string">"^0.2.0"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>So let’s install the missing ones:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i -S hexo-&#123;browsersync,deployer-git,generator-feed,generator-sitemap&#125;</div></pre></td></tr></table></figure>
<p><strong>Awesome!</strong> You can test your brand new blog now typing these commands in your terminal:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo g &amp;&amp; hexo s</div></pre></td></tr></table></figure>
<blockquote>
<p>This is a shortcut for <code>hexo generate</code> and <code>hexo server</code></p>
</blockquote>
<h2 id="Configuring-Your-Blog"><a href="#Configuring-Your-Blog" class="headerlink" title="Configuring Your Blog"></a>Configuring Your Blog</h2><p>Now that you have your site up and running, you need to configure it with your personal information. We have two configurations files to change, <code>_config.yml</code> in the root of your project, and <code>_config.yml</code> located in the <code>themes/next</code> folder. Just open those files and put your personal information on them!</p>
<p>If you have some doubts about it, look my config files <a href="https://github.com/ericdouglas/blog-assets/blob/master/_config.yml" target="_blank" rel="external">here</a> and <a href="https://github.com/ericdouglas/hexo-theme-next/blob/master/_config.yml" target="_blank" rel="external">here</a>.</p>
<h2 id="Writing-Your-First-Article"><a href="#Writing-Your-First-Article" class="headerlink" title="Writing Your First Article"></a>Writing Your First Article</h2><p>Now you are almost done with your blog setup. It is time to write your first article.</p>
<p>To generate a new article file, use the following command:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new post <span class="string">"name of the post"</span></div></pre></td></tr></table></figure>
<p>This file will be located at <code>source/_posts</code>. More information about <em>writing</em> can be found <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">here</a>.</p>
<h2 id="Hosting-Your-Blog"><a href="#Hosting-Your-Blog" class="headerlink" title="Hosting Your Blog"></a>Hosting Your Blog</h2><p>You can host your blog for free in GitHub. You have two “hosting options” to do this:</p>
<h3 id="https-username-github-io"><a href="#https-username-github-io" class="headerlink" title="https://username.github.io"></a><a href="https://username.github.io" target="_blank" rel="external">https://username.github.io</a></h3><p>If you want your blog to be found in this type of address, for example: <code>https://ericdouglas.github.io</code>, you need to create a repository on GitHub with that exactly name: <code>&lt;username&gt;.github.io</code>. <strong>In this type of repository, you should deploy your files to the <code>master</code> branch</strong>.</p>
<h3 id="https-username-github-io-repository-name"><a href="#https-username-github-io-repository-name" class="headerlink" title="https://username.github.io/repository-name"></a><a href="https://username.github.io/repository-name" target="_blank" rel="external">https://username.github.io/repository-name</a></h3><p>If you want your blog to be found in this type of address, for example: <code>https://ericdouglas.github.io/blog</code>, you need to create a repository on GitHub with that exactly name: <code>blog</code>. <strong>In this type of repository, you should deploy your files to the <code>gh-pages</code> branch</strong>.</p>
<h2 id="Enabling-HTTPS-on-GitHub"><a href="#Enabling-HTTPS-on-GitHub" class="headerlink" title="Enabling HTTPS on GitHub"></a>Enabling HTTPS on GitHub</h2><p>To enable HTTPS on your blog, go to the <strong>Settings</strong> tab in your repository, scroll down the page and click on <strong>Enforce HTTPS</strong>.</p>
<p><img src="http://i.imgur.com/6FZo5TY.png" alt="Settings tab"></p>
<p><img src="http://i.imgur.com/YEQ1SKT.png" alt="Enforce HTTPS"></p>
<h2 id="Adding-a-favicon-to-Your-Blog"><a href="#Adding-a-favicon-to-Your-Blog" class="headerlink" title="Adding a favicon to Your Blog"></a>Adding a favicon to Your Blog</h2><p>Just go to the <a href="http://realfavicongenerator.net/" target="_blank" rel="external">Realfavicongenerator.net</a> site and generate your favicon. After this, put the <code>favicon.ico</code> in the <code>source</code> folder.</p>
<h2 id="Generate-and-Deploy"><a href="#Generate-and-Deploy" class="headerlink" title="Generate and Deploy"></a>Generate and Deploy</h2><p><strong>This is the final step</strong>! Let’s generate the static files and deploy those ones to GitHub. To do this use the following commands:</p>
<blockquote>
<p><strong>OBS</strong>: The information about where Hexo should deploy your files should be stated in the <code>_config.yml</code> at the root of your project.</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo d -g</div></pre></td></tr></table></figure>
<blockquote>
<p>Shortcut for <code>hexo generate</code> and <code>hexo deploy</code></p>
</blockquote>
<p><strong>It’s done!</strong> Now you have a great blog fully set up, just write some cool stuff there and share with us :D</p>
<blockquote>
<p>If you found something wrong, you can contribute to this article <a href="https://github.com/ericdouglas/blog-assets/blob/master/source/_posts/how-to-create-a-blog-with-hexo.md" target="_blank" rel="external">here</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://pbs.twimg.com/profile_images/476729162707644418/mQZOTo9f.png&quot; alt=&quot;Hexo logo&quot;&gt;&lt;/p&gt;
&lt;p&gt;So you want to write about some cool stuff you are doing but don’t want to waste time configuring a bunch of things? Well, a &lt;strong&gt;really great&lt;/strong&gt; solution for this is to use the static site generator &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;. It’s &lt;strong&gt;incredibly simple&lt;/strong&gt; how fast you can have a blog up and running with this great tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let’s learn how!&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="hexo" scheme="http://ericdouglas.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Installing Compass on Linux Mint</title>
    <link href="http://ericdouglas.github.io/2016/08/21/Installing-Compass-on-Linux-Mint/"/>
    <id>http://ericdouglas.github.io/2016/08/21/Installing-Compass-on-Linux-Mint/</id>
    <published>2016-08-21T14:17:44.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p>That’s a quick tip but can save you some time.</p>
<p>If you are facing some problems in order to install the Compass gem, try the following approach:</p>
<a id="more"></a>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo gem update --system</div><div class="line">sudo apt-get install ruby-ffi</div><div class="line">sudo gem install compass</div></pre></td></tr></table></figure>
<p>Also, check if you have <code>gcc</code> installed on your machine.</p>
<p>That’s it!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;That’s a quick tip but can save you some time.&lt;/p&gt;
&lt;p&gt;If you are facing some problems in order to install the Compass gem, try the following approach:&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://ericdouglas.github.io/tags/linux/"/>
    
      <category term="compass" scheme="http://ericdouglas.github.io/tags/compass/"/>
    
  </entry>
  
  <entry>
    <title>Git - Useful Tips</title>
    <link href="http://ericdouglas.github.io/2016/04/01/Git-Useful-Tips/"/>
    <id>http://ericdouglas.github.io/2016/04/01/Git-Useful-Tips/</id>
    <published>2016-04-01T11:29:23.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/QRZsSQI.jpg" alt="git"></p>
<p>The intention of this article is to be a helpful reminder for those that use git to manage their projects.</p>
<p>If you are new to git, first read some contents listed in the <a href="#References">References</a> section, and then come back and use this article as a cheatsheet.</p>
<p>In front of the git commands, you’ll see some aliases from the <a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Cheatsheet#git" target="_blank" rel="external">oh-my-zsh cheatsheet</a>.</p>
<p><strong>Let’s get started!</strong></p>
<h2 id="Table-of-Contents"><a href="#Table-of-Contents" class="headerlink" title="Table of Contents"></a>Table of Contents</h2><ul>
<li><a href="#Basic-Commands">Basic Commands</a></li>
<li><a href="#Commit-Structure">Commit Structure</a></li>
<li><a href="#Managing-the-Staging-Area">Managing the Staging Area</a></li>
<li><a href="#Stashes-and-Branches">Stashes and Branches</a></li>
<li><a href="#Managing-a-Remote-Repository">Managing a Remote Repository</a></li>
<li><a href="#More-Useful-Commands">More Useful Commands</a></li>
<li><a href="#Git-Workflow">Git Workflow</a></li>
<li><a href="#References">References</a></li>
</ul>
<h2 id="Basic-Commands"><a href="#Basic-Commands" class="headerlink" title="Basic Commands"></a>Basic Commands</h2><ul>
<li><code>git config --global user.name &quot;Your Name&quot;</code></li>
<li><code>git config --global user.email &quot;youremail@example.com&quot;</code></li>
<li><code>git config --global core.editor &lt;your favorite editor here&gt;</code><ul>
<li>Ex: <code>git config --global core.editor vim</code></li>
</ul>
</li>
<li><code>git init</code>: Start a new git repository.</li>
</ul>
<h2 id="Commit-Structure"><a href="#Commit-Structure" class="headerlink" title="Commit Structure"></a>Commit Structure</h2><ul>
<li><code>git status</code> (<code>gst</code>): See the project status.</li>
<li>Working Areas: <ul>
<li><strong>.git Directory</strong></li>
<li><strong>Staging Area</strong></li>
<li><strong>working Directory</strong><br><img src="https://i.imgur.com/B0w11nb.png" alt="Illustration of the working areas"></li>
</ul>
</li>
<li><code>git add &lt;filename&gt;</code> (<code>ga</code>): Add a file to the Staging Area.</li>
<li><code>git add .</code> (<code>gaa</code>): Add all files to the Staging Area.</li>
<li><code>git add *.js</code>: Add all <code>.js</code> files to the Staging Area.</li>
<li><code>git rm --cached &lt;file&gt;</code>: Remove a <strong>new file</strong> from the Staging area.</li>
<li><code>git commit -m &quot;My first commit&quot;</code> (<code>gcmsg</code>): Create a commit with a message.</li>
<li><strong><code>git commit -v -a</code> (<code>gca</code>)</strong>: <ul>
<li><code>-v</code> is verbose, shows the diff at bottom and more meaningful information. </li>
<li><code>-a</code> is like <code>git add .</code> so it adds <strong>all</strong> files that have been modified and deleted, but new files you have not told Git about are not affected.</li>
</ul>
</li>
<li><code>git help &lt;command&gt;</code>: Open the manual for the respective command.</li>
<li><code>git log</code> (<code>glg</code>, <code>glgg</code>, <code>glo</code>, <code>glog</code>): Show all commits/history of the project.</li>
</ul>
<h2 id="Managing-the-Staging-Area"><a href="#Managing-the-Staging-Area" class="headerlink" title="Managing the Staging Area"></a>Managing the Staging Area</h2><ul>
<li><code>git reset HEAD &lt;filename&gt;</code> (<code>grh</code>): Remove a modified file from the Staging area.</li>
<li><code>git reset HEAD</code> (grh): Remove all modified files from the Staging area.</li>
<li><code>git checkout &lt;filename&gt;</code> (<code>gco</code>): Remove a modified file from the Staging area and undo its alterations.</li>
<li><code>git commit -m &quot;My first commit&quot; --amend</code> (``): Add the files/modifications in the Staging area in the last commit.</li>
<li><strong><code>git commit -v -a --amend</code> (<code>gca!</code>): Add the files/modifications in the Staging area in the last commit</strong>.</li>
<li><strong>PROTIP</strong>: don’t use <code>--amend</code> after send the modification to some remote repository. This command is just for local development.</li>
<li><code>.gitignore</code>: file that tells to git what files should not be tracked. <ul>
<li>You can add a file that’s ignored with <code>git add &lt;filename&gt; -f</code></li>
</ul>
</li>
<li><code>git diff &lt;filename&gt;</code> (<code>gd</code>): Show the modifications in the current file based in its last commit.</li>
<li><code>git diff</code> (<code>gd</code>): Show the modifications in all files based in their last commit.</li>
<li><code>git reset HEAD~2 --soft</code>: Remove the last two commits from the project history but <strong>DO NOT DISCARD</strong> the modifications.</li>
<li><code>git reset HEAD~2 --hard</code>: Remove the last two commits from the project history but <strong>DISCARD</strong> the modifications and all new files that was created in such commits. </li>
<li><code>git reset &lt;commit&gt; --soft --hard</code>:<ul>
<li><code>--soft</code>: Leaves all your changed files “Changes to be committed”.</li>
<li><code>--hard</code>: Any changes to tracked files in the working tree since <code>&lt;commit&gt;</code> are discarded.</li>
</ul>
</li>
<li><code>git reflog</code>: show all commits that were “deleted”.</li>
<li><code>git merge &lt;commit hash&gt;</code>: restore the commit.</li>
<li><strong><code>git add -i</code> (<code>ga -i</code>): Open an interactive mode. REALLY USEFUL!</strong><ul>
<li><strong>obs</strong>: use with the <em>4: add untracked</em> option to <code>git add</code> files quickly.</li>
<li><code>1 &lt;enter&gt;</code>: Select file 1 to be added to the Staging area.</li>
<li><code>1,3 &lt;enter&gt;</code>: Select files 1 and 3 to be added to the Staging area.</li>
<li><code>1-5 &lt;enter&gt;</code>: Select files 1 to 5 to be added to the Staging area.</li>
<li><code>-2 &lt;enter&gt;</code>: Deselect file 2 to be added to the Staging area.</li>
<li><code>-2-4 &lt;enter&gt;</code>: Deselect files 2 to 4 to be added to the Staging area.</li>
</ul>
</li>
<li><code>git clean -f</code>: Remove (delete) untracked files from the working tree.</li>
</ul>
<h2 id="Stashes-and-Branches"><a href="#Stashes-and-Branches" class="headerlink" title="Stashes and Branches"></a>Stashes and Branches</h2><h3 id="Stash"><a href="#Stash" class="headerlink" title="Stash"></a>Stash</h3><ul>
<li><code>git stash</code> (<code>gsta</code>): Remove all files in the Staging Area to the <em>“Stash Area”</em>, that works as another type of <em>Working Area</em>.</li>
<li><code>git stash list</code>: Show a list with all stashes.</li>
<li><code>git stash apply</code>: Return all files from the last created stash to the Staging Area.</li>
<li><code>git stash apply stash@{2}</code>: Return all files from the <code>stash@{2}</code> to the Staging Area.<ul>
<li><strong>obs</strong>: <code>stash@{0}</code> is always the most recent stash.</li>
</ul>
</li>
<li><code>git stash clear</code>: Clear all stashes.</li>
<li><code>git stash save &quot;name of the stash&quot;</code>: Save a new stash with a particular name.</li>
<li><code>git stash pop</code> (<code>gstp</code>): Return all files from the last created stash to the Staging Area and remove the stash from the list.</li>
<li><code>git stash drop</code> (<code>gstd</code>): Remove the last created stash (<code>stash@{0}</code>) from the list. <strong>Be careful!</strong></li>
<li><code>git stash drop stash@{2}</code>: Remove the <code>stash@{2}</code> stash from the list. <strong>Be careful!</strong></li>
</ul>
<h3 id="Branch"><a href="#Branch" class="headerlink" title="Branch"></a>Branch</h3><ul>
<li><code>git checkout -b develop</code> (<code>gco</code>): Create a new branch called <em>develop</em> and change from the current branch to the <em>develop</em> branch.</li>
<li><code>git branch</code> (<code>gb</code>): List all branches.</li>
<li><code>git checkout master</code> (<code>gcm</code>): Switch for the <code>master</code> branch.</li>
<li><code>git merge &lt;branch&gt;</code> (<code>gm</code>): Merge a branch into another.</li>
<li><code>gitk --all &amp;</code>: Open a GUI to visualize your branches and commits.<ul>
<li>You can test <a href="http://www.gitkraken.com/" target="_blank" rel="external">GitKraken</a> too :)</li>
</ul>
</li>
<li><code>git rebase master</code>: Add the modifications from the <code>master</code> branch into the current branch and move those alterations in the current branch to the top of what was added. <em>“…rewinding head to replay your work on top of it”</em><ul>
<li><code>git rebase --continue</code>: after resolve conflicts.</li>
</ul>
</li>
<li><code>git branch -d &lt;branch&gt;</code>: delete a branch.<ul>
<li><code>-D</code>: force to delete a branch.</li>
</ul>
</li>
<li><strong>PROTIP</strong>: one branch for each functionality or bugfix. There is no problem in create lots of branches!</li>
<li><p><code>git merge &lt;branch&gt; --squash</code>: Concatenate several commits into one.</p>
<ul>
<li><strong><code>--squash</code> workflow</strong>:<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Go to the `master` branch</span></div><div class="line">git checkout master</div><div class="line"><span class="comment"># Create a temp branch</span></div><div class="line">git checkout -b temp</div><div class="line"><span class="comment"># Merge the feature/x branch into the temp using --squash</span></div><div class="line">git merge feature/x --squash</div><div class="line"><span class="comment"># See the new modifications/files in the Staging Area</span></div><div class="line">git status</div><div class="line"><span class="comment"># Create the unified commit</span></div><div class="line">git commit -m <span class="string">"Add feature/x"</span></div><div class="line"><span class="comment"># Delete the feature/x branch</span></div><div class="line">git branch -D feature/x</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Differences between <code>rebase</code> and <code>merge</code>:</p>
<ul>
<li><strong>rebase</strong>: <ul>
<li>keeps the history in a linear fashion;</li>
<li><strong>destructive</strong>: remove the last commit and creates a new one;</li>
<li>do not use this method if the commit is already in the remote server.</li>
</ul>
</li>
<li><strong>merge</strong>:<ul>
<li>useful for keeping the forking history;</li>
<li>creates a new commit to unify two branches.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Managing-a-Remote-Repository"><a href="#Managing-a-Remote-Repository" class="headerlink" title="Managing a Remote Repository"></a>Managing a Remote Repository</h2><ul>
<li><code>git remote add &lt;name&gt; &lt;url&gt;</code>: Add a new remote repository that will be tracked.</li>
<li><code>git remote rm &lt;name&gt;</code>: Remove a remote repository.</li>
<li><code>git push &lt;remote&gt; &lt;remote-branch&gt;</code> (<code>gp</code>, <code>ggp</code>): Push local commits to a remote repository in the specified branch.</li>
<li><code>git fetch &lt;remote&gt; &lt;remote-branch&gt;</code> (<code>gfa</code>): Fetch new commits from a remote repository into a special branch <code>&lt;remote&gt;/&lt;branch&gt;</code>.</li>
<li><code>git pull &lt;remote&gt; &lt;remote-branch&gt;</code> (<code>gl</code>, <code>ggl</code>): Incorporates changes from a remote repository into the current branch. In its default mode, <code>git pull</code> is shorthand for <code>git fetch</code> followed by <code>git merge</code><ul>
<li><code>git pull --rebase</code> (<code>gup</code>): Runs <code>git rebase</code> instead of <code>git merge</code>.</li>
</ul>
</li>
</ul>
<h2 id="More-Useful-Commands"><a href="#More-Useful-Commands" class="headerlink" title="More Useful Commands"></a>More Useful Commands</h2><ul>
<li><code>git tag &lt;name&gt;</code>: Create a new tag (<em>e.g.</em> <code>v1.3</code>).</li>
<li><code>git push --tags</code>: Push all tags to the remote repository.</li>
<li><code>git push &lt;tag&gt;</code>: Push a specific tag to the remote repository.</li>
</ul>
<h2 id="Git-Workflow"><a href="#Git-Workflow" class="headerlink" title="Git Workflow"></a>Git Workflow</h2><p><img src="http://i.imgur.com/F9vilJE.png" alt="git workflow"></p>
<ul>
<li>Types of branches: <code>master</code>, <code>develop</code>, <code>feature</code>, <code>release</code>, <code>hotfix</code></li>
<li><strong>MAIN BRANCHES</strong> <ul>
<li><strong><code>master</code> branch</strong>:<ul>
<li><code>origin/master</code>: always reflects a <em>production-ready</em> state.</li>
</ul>
</li>
<li><strong><code>develop</code> branch</strong>:<ul>
<li><code>origin/develop</code>: always reflects a state with the latest delivered development changes for the next release.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>SUPPORTING BRANCHES</strong> </p>
<ul>
<li><p><strong><code>feature</code> branch</strong>:</p>
<ul>
<li>Comes from: <code>develop</code>.</li>
<li>Merge into: <code>develop</code>.</li>
<li>Name convention: <code>feature/feature-name</code>.</li>
<li><p>Create the branch: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b feature/my-feature develop</div></pre></td></tr></table></figure>
</li>
<li><p>Merge the branch (finishing the <code>feature</code> branch):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout develop</div><div class="line">git merge --no-ff feature/my-feature</div><div class="line">git branch -d feature/my-feature</div><div class="line">git push origin develop</div></pre></td></tr></table></figure>
</li>
<li><p>The <code>--no-ff</code> flag causes the merge to always create a new commit object. This avoids losing information about the historical existence of a feature branch and groups together all commits that together added the feature. </p>
</li>
</ul>
</li>
<li><p><strong><code>release</code> branch</strong>:</p>
<ul>
<li>Comes from: <code>develop</code>.</li>
<li>Merge into: <code>develop</code> <strong>and</strong> <code>master</code>.</li>
<li>Name convention: <code>release/release-v1.3</code>.</li>
<li><p>Create the branch: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout -b release/release-v1.3 develop</div><div class="line"><span class="comment"># Bump your software version to v1.3</span></div><div class="line">git commit -a -m <span class="string">"Bumped version number to v1.3"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Merge the branch (finishing the <code>release</code> branch):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Merge into master</span></div><div class="line">git checkout master</div><div class="line">git merge --no-ff release/release-v1.3</div><div class="line">git tag -a v1.3</div><div class="line">git push origin master &amp;&amp; git push --tags</div><div class="line"></div><div class="line"><span class="comment"># Merge into develop</span></div><div class="line">git checkout develop</div><div class="line">git merge --no-ff release/release-v1.3</div><div class="line"></div><div class="line">git branch -d release/release-v1.3</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong><code>hotfix</code> branch</strong>:</p>
<ul>
<li>Comes from: <code>master</code>.</li>
<li>Merge into: <code>develop</code> <strong>and</strong> <code>master</code>.</li>
<li>Name convention: <code>hotfix/hotfix-v1.3.1</code>.</li>
<li><p>Create the branch: </p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout -b hotfix/hotfix-v1.3.1 develop</div><div class="line"><span class="comment"># Bump your software version to v1.3.1</span></div><div class="line">git commit -a -m <span class="string">"Bumped version number to v1.3.1"</span></div><div class="line"><span class="comment"># After fix the bug</span></div><div class="line">git commit -m <span class="string">"Fixed severe production problem"</span></div></pre></td></tr></table></figure>
</li>
<li><p>Merge the branch (finishing the <code>hotfix</code> branch):</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Merge into master</span></div><div class="line">git checkout master</div><div class="line">git merge --no-ff hotfix/hotfix-v1.3.1</div><div class="line">git tag -a v1.3.1</div><div class="line">git push origin master &amp;&amp; git push --tags</div><div class="line"></div><div class="line"><span class="comment"># Merge into develop</span></div><div class="line">git checkout develop</div><div class="line">git merge --no-ff hotfix/hotfix-v1.3.1</div><div class="line"></div><div class="line">git branch -d hotfix/hotfix-v1.3.1</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul>
<li><a href="http://www.akitaonrails.com/2010/08/17/screencast-comecando-com-git" target="_blank" rel="external">Começando com git</a> <code>pt-br</code></li>
<li><a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">A successful Git branching model</a></li>
<li><a href="https://www.atlassian.com/git/tutorials/comparing-workflows/" target="_blank" rel="external">Comparing workflows</a></li>
<li><a href="http://danielkummer.github.io/git-flow-cheatsheet/" target="_blank" rel="external">git-flow cheatsheet</a></li>
<li><a href="https://github.com/open-source-society/computer-science#prerequisite" target="_blank" rel="external">Resources to learn git</a></li>
<li><a href="https://github.com/ericdouglas/dev-log/blob/master/source/git.md" target="_blank" rel="external">More resources</a></li>
</ul>
<blockquote>
<p>If you found something wrong, you can contribute to this article <a href="https://github.com/ericdouglas/blog-assets/blob/master/source/_posts/Git-Useful-Tips.md" target="_blank" rel="external">here</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/QRZsSQI.jpg&quot; alt=&quot;git&quot;&gt;&lt;/p&gt;
&lt;p&gt;The intention of this article is to be a helpful reminder for those that use 
    
    </summary>
    
    
      <category term="git" scheme="http://ericdouglas.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Checklist for your new Open Source JavaScript Project</title>
    <link href="http://ericdouglas.github.io/2015/09/27/checklist-for-your-new-open-source-javascript-project/"/>
    <id>http://ericdouglas.github.io/2015/09/27/checklist-for-your-new-open-source-javascript-project/</id>
    <published>2015-09-27T20:13:15.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/fIeyz2I.png" alt="Open-source JavaScript"></p>
<p>In this post, I’ll synthesize the lessons passed by <a href="https://twitter.com/kentcdodds" target="_blank" rel="external">Kent C. Dodds</a> in his series “How to Write an Open Source JavaScript Library”. Check his course on <a href="https://egghead.io/series/how-to-write-an-open-source-javascript-library" target="_blank" rel="external">egghead.io</a>. </p>
<p>After watching that (<strong>excellent</strong>) course, you can use this checklist to quickly refresh your mind and remember each step that you need to do in order to create your next open source project.</p>
<h2 id="Checklist"><a href="#Checklist" class="headerlink" title="Checklist"></a>Checklist</h2><ul>
<li><p><strong>Prefer to write a micro-library</strong>. Benefits:</p>
<ul>
<li>easier to reason about</li>
<li>easier to test</li>
<li>easier to reuse</li>
</ul>
</li>
<li><p><strong>Create a repository for your library</strong>:</p>
<ul>
<li>Go to your git repository hosting service (here we’ll use <a href="https://github.com/" target="_blank" rel="external">GitHub</a>)</li>
<li>Create a new repository</li>
<li>Create a README file</li>
<li>Clone your repository to your local machine<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone git@github.com:YOUR_USER_NAME/YOUR_REPOSITORY_NAME</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Ensure that you have <a href="https://nodejs.org" target="_blank" rel="external">Node.js</a> installed</strong>.</p>
</li>
<li><p><strong>Set NPM properties</strong>:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm set init-author-name 'Your name'</div><div class="line">npm set init-author-email 'Your email'</div><div class="line">npm set init-author-url 'http://yourdomain.com'</div><div class="line">npm set init-license 'MIT'</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Save modules with an exact version</strong>:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm set save-exact true</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Login with your NPM account on terminal</strong>:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm adduser</div><div class="line">Username: YOUR_USER_NAME</div><div class="line">Password: YOUR_PASSWORD</div><div class="line">Email: YOUR_EMAIL@domain.com</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p><strong>Create a <code>package.json</code></strong>:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm init</div></pre></td></tr></table></figure>
</li>
<li><p><strong>Create the main file</strong>:</p>
<ul>
<li>Create the <code>src/index.js</code> file that will expose all the module’s functionalities.<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  funcOne: funcOne,</div><div class="line">  funcTwo: funcTwo</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>PROTIPs</strong>:</p>
<ul>
<li>Install and save dependencies: <code>npm i -S module-name</code> is equal to <code>npm install --save module-name</code></li>
<li>Install and save development dependencies: <code>npm i -D module-name</code> is equal to <code>npm install --save-dev module-name</code></li>
</ul>
</li>
<li><p><strong>Add a .gitignore file</strong></p>
</li>
<li><p><strong>Push your changes to GitHub</strong></p>
</li>
<li><p><strong>Publish to NPM</strong>: <code>npm publish</code></p>
</li>
<li><p><strong>Releasing a version to GitHub</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag 1.0.0</div><div class="line">git push --tags</div></pre></td></tr></table></figure>
<ul>
<li>Go to <em>releases</em> on GitHub</li>
<li>Draft a new release</li>
</ul>
</li>
<li><p><strong>Releasing a new version to NPM</strong>:</p>
<ul>
<li>Based on the type of change that you did in your code, you should bump the version of your module.</li>
<li>Use <a href="http://semver.org/" target="_blank" rel="external">Semantic Versioning</a> to bump the version correctly</li>
<li>Commit the code <code>git add</code> &amp; <code>git commit</code></li>
<li>Add a new tag <code>git tag 1.1.0</code></li>
<li>Push to GH (GitHub) <code>git push</code></li>
<li>Push the tags <code>git push --tags</code></li>
<li>Republish to NPM <code>npm publish</code></li>
<li>See if all is okay <code>npm info &lt;your-module-name&gt;</code></li>
</ul>
</li>
<li><p><strong>Publishing a beta version</strong>:</p>
<ul>
<li>Do some stuff in your code</li>
<li>Bump the version with the sufix <code>-beta.0</code>. <strong>Ex</strong>: <code>1.3.1-beta.3</code></li>
<li>Commit the code <code>git add</code> &amp; <code>git commit</code></li>
<li>Add a new tag <code>git tag 1.1.0</code></li>
<li>Push to GH (GitHub) <code>git push</code></li>
<li>Push the tags <code>git push --tags</code></li>
<li>Publish to NPM with <strong>–tag beta</strong> . <strong>Ex</strong>: <code>npm publish --tag beta</code></li>
<li>See if all is okay. <code>npm info &lt;your-module-name&gt;</code></li>
<li>How to install a beta version: <code>npm install &lt;module-name&gt;@beta</code> (latest beta) or <code>npm install &lt;module-name&gt;@1.3.1-beta.3</code> (specific version)</li>
</ul>
</li>
<li><p><strong>Setting up Unit Testing with Mocha and Chai</strong>:</p>
<ul>
<li>Install mocha and chai <code>npm i -D mocha chai</code></li>
<li>Create your test file <code>src/index.test.js</code> or <code>src/index.spec.js</code></li>
<li>Update package.json <code>&quot;test&quot;: &quot;mocha src/index.test.js -w&quot;</code></li>
<li>Run <code>npm test</code></li>
</ul>
</li>
<li><p><strong>Automating Releases with semantic-release</strong>:</p>
<ul>
<li>Install semantic-release <code>npm i -g semantic-release-cli</code></li>
<li>Setup semantic-release <code>semantic-release-cli setup</code></li>
<li>Setup your CI configuration file to run the tests before run semantic-release.<ul>
<li>Ex: <code>.travis.yml</code><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># some stuff here</span></div><div class="line"></div><div class="line">before_script:</div><div class="line">  - npm prune</div><div class="line">script:</div><div class="line">  - npm <span class="keyword">run</span><span class="bash"> <span class="built_in">test</span></span></div><div class="line"><span class="bash">after_success:</span></div><div class="line"><span class="bash">  - npm run semantic-release</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><strong>Writing conventional commits with commitizen</strong>:</p>
<ul>
<li><a href="https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit" target="_blank" rel="external">Angular git commit guidelines</a> </li>
<li><code>npm i -D commitizen cz-conventional-changelog</code><ul>
<li><strong>commitizen</strong>: allows to write commit messages</li>
<li><strong>cz-conventional-changelog</strong>: Ask questions to generate the commit</li>
</ul>
</li>
<li><p>Add commitizen in npm scripts: </p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"script": &#123;</div><div class="line">  "commit": "git-cz"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Configure <strong>commitizen</strong> to use <strong>cz-conventional-changelog</strong>. In <code>package.json</code>, add the following property:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"czConfig": &#123;</div><div class="line">  "path": "node_modules/cz-conventional-changelog"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>ps</strong>: I got a problem with the version 1.1.1 and 1.1.0 of the cz-conventional-changelog, <a href="https://github.com/commitizen/cz-conventional-changelog/issues/6" target="_blank" rel="external">and other people too</a>. To fix it, I installed the version <strong>1.0.1</strong>, and worked properly.</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install cz-conventional-changelog@1.0.1 -D</div></pre></td></tr></table></figure>
</li>
<li><p><strong>ps2</strong>: Commitizen (and cz-conventional-changelog) <a href="http://ericdouglas.github.io/2015/09/27/checklist-for-your-new-open-source-javascript-project/#comment-2312712674">updated</a>! :)</p>
</li>
<li><p>Using commitizen:</p>
<ul>
<li>Add your changes <code>git add</code></li>
<li><code>npm run commit</code><ul>
<li>Choose the type of changes that you did. <strong>Ex</strong>: <em>chore</em></li>
<li>Choose the scope of the change. <strong>Ex</strong>: <em>releasing</em></li>
<li>Add a description. <strong>Ex</strong>: <em>Add travis config, conventional commit and semantic-release</em></li>
<li>Add a longer description</li>
<li>List break changes or issues closed by this change. <strong>Ex</strong>: <em>closes #1</em></li>
</ul>
</li>
</ul>
</li>
<li>See if everything is ok <code>git log</code></li>
</ul>
</li>
<li><p><strong>Committing a new feature with commitizen</strong>:</p>
<ul>
<li>Create an issue on GitHub to be closed with that feature/commit</li>
<li>Add a new feature and its test</li>
<li><code>git add</code></li>
<li><code>npm run commit</code></li>
<li>Type of change: <em>feat</em> </li>
<li>Scope: <em>random</em></li>
<li>Short description: <em>Add ability to get an array of starwars names</em> </li>
<li>Longer description: <em>If you pass a number to the random function, you will receive an array with that number of random items</em> </li>
<li>List any break changes/issues closed: <em>closes #2</em> </li>
<li>Verify if everything is ok <code>git log</code></li>
</ul>
</li>
<li><p><strong>Automatically running tests before commits with ghooks</strong>:</p>
<ul>
<li>Install <strong>ghooks</strong> <code>npm i -D ghooks</code></li>
<li><p>Configure ghooks in package.json:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"config": &#123;</div><div class="line">  "ghooks": &#123;</div><div class="line">    "pre-commit": "npm run test:single"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>ps</strong>: <em>ghooks</em> will prevent us to commit bad code</p>
</li>
</ul>
</li>
<li><p><strong>Adding code coverage recording with Istanbul</strong>:</p>
<ul>
<li><code>npm i -D istanbul</code></li>
<li><p>Set npm script to run Istanbul:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "test:single": "istanbul cover -x *.test.js _mocha -- -R spec src/index.test.js"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Add the <code>coverage</code> folder in the <code>.gitignore</code> file</p>
</li>
<li>Run <code>npm run test:single</code></li>
</ul>
</li>
<li><p><strong>Adding code coverage checking</strong>:</p>
<ul>
<li><p>Check coverage with <strong>ghook</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">"config": &#123;</div><div class="line">  "ghooks": &#123;</div><div class="line">    "pre-commit": "npm run test:single &amp;&amp; npm run check-coverage"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Add check-coverage in npm scripts:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "check-coverage": "istanbul check-coverage --statements 100 --branches 100 --functions 100 --lines 100"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Add check-coverage in your CI config file:</p>
<ul>
<li><code>.travis.yml</code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">script:</div><div class="line">  - npm run test:single</div><div class="line">  - npm run check-coverage</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Add code coverage reporting</strong>:</p>
<ul>
<li>Create an account at <a href="https://codecov.io/" target="_blank" rel="external">codecov.io</a> </li>
<li><code>npm i -D codecov.io</code></li>
<li><p>Add <strong>report-coverage</strong> into npm scripts:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "report-coverage": "cat ./coverage/lcov.info | codecov"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Add report-coverage in your CI config file:</p>
<ul>
<li><code>.travis.yml</code><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">after_success:</div><div class="line">  - npm run report-coverage</div><div class="line">  - npm run semantic-release</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>Adding badges to your README</strong>:</p>
<ul>
<li>Go to <a href="http://shields.io/" target="_blank" rel="external">shields.io</a> </li>
<li>Choose your badges! :)</li>
<li>Markdown structure to add badges: <figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[<span class="string">![image description</span>](<span class="link">shields.io link</span>)](<span class="link">link the badge to the respective place</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Adding ES6 Support</strong>:</p>
<ul>
<li><code>npm i -D babel</code></li>
<li><p>Add a <strong>build</strong> task in npm scripts:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "build": "babel src/index.js -o dist/index.js"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Change the “main” file in your package.json to <code>dist/index.js</code></p>
</li>
<li><p>Add a <strong>prebuild</strong> task into npm scripts:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "prebuild": "rm -rf dist &amp;&amp; mkdir dist"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Add <strong>build</strong> in your CI config file:<br><code>.travis.yml</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">script:</div><div class="line">  - npm run test:single</div><div class="line">  - npm run check-coverage</div><div class="line">  - npm run build</div></pre></td></tr></table></figure>
</li>
<li><p>Add a <strong>postbuild</strong> task in npm scripts:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "postbuild": "cp src/starwars-names.json dist/starwars-names.json"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Adding ES6 Support in Tests using Mocha and Babel</strong>:</p>
<ul>
<li>Update your <strong>test</strong> and <strong>test:single</strong> tasks on npm script:<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">"scripts": &#123;</div><div class="line">  "test": "mocha src/index.test.js -w --compilers js:babel/register",</div><div class="line">  "test:single": "istanbul cover -x *.test.js _mocha -- -R spec src/index.test.js --compilers js:babel/register"</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><strong>Limit Built Branches on Travis</strong>:</p>
<ul>
<li>Add the following code in your <code>.travis.yml</code>:<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">branches:</span></div><div class="line"><span class="symbol">  only:</span></div><div class="line">    - master</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<p><strong>Good luck in your next Open Source JavaScript project</strong>!!!</p>
<blockquote>
<p>If you found something wrong, you can contribute to this article <a href="https://github.com/ericdouglas/blog-assets/blob/master/source/_posts/checklist-for-your-new-open-source-javascript-project.md" target="_blank" rel="external">here</a>.</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fIeyz2I.png&quot; alt=&quot;Open-source JavaScript&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this post, I’ll synthesize the lessons passed by &lt;a hre
    
    </summary>
    
    
      <category term="open-source" scheme="http://ericdouglas.github.io/tags/open-source/"/>
    
      <category term="javascript" scheme="http://ericdouglas.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Node Projects</title>
    <link href="http://ericdouglas.github.io/2015/09/17/node-projects/"/>
    <id>http://ericdouglas.github.io/2015/09/17/node-projects/</id>
    <published>2015-09-17T19:48:33.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/tluoGKp.png" alt="Node Projects"></p>
<p>Hi! </p>
<p>If you are reading this text, you probably want to create <strong>cool</strong> projects with Node.js, and yes, you’re in the <strong>right place</strong>!</p>
<p>Here I’ll list all the projects implemented based on the software specifications created at the <a href="https://github.com/ericdouglas/app-specs/" target="_blank" rel="external">app-specs</a>.</p>
<blockquote>
<p>If you liked this idea, you can help us creating more specifications or implementing more applications and share with us! Take a look at the <a href="https://github.com/ericdouglas/app-specs#how-to-collaborate" target="_blank" rel="external">contribution guide</a>!</p>
</blockquote>
<h2 id="Projects"><a href="#Projects" class="headerlink" title="Projects"></a>Projects</h2><ol>
<li><strong><a href="https://github.com/ericdouglas/link-manager-api" target="_blank" rel="external">Link Manager API</a></strong></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/tluoGKp.png&quot; alt=&quot;Node Projects&quot;&gt;&lt;/p&gt;
&lt;p&gt;Hi! &lt;/p&gt;
&lt;p&gt;If you are reading this text, you probably want to crea
    
    </summary>
    
    
      <category term="nodejs" scheme="http://ericdouglas.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with Ember 2.0</title>
    <link href="http://ericdouglas.github.io/2015/08/16/Getting-Started-with-Ember-2-0/"/>
    <id>http://ericdouglas.github.io/2015/08/16/Getting-Started-with-Ember-2-0/</id>
    <published>2015-08-16T18:57:35.000Z</published>
    <updated>2017-08-27T10:55:50.587Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://i.imgur.com/cduds4J.jpg" alt="Getting Started with Ember 2.0"></p>
<p>In this <em>checklist-like</em> article, we will create a simple blog application with Ember 2.0 and Firebase! </p>
<p>Here we’ll focus exclusively on the <strong>how</strong> to create an Ember 2.0 application.</p>
<blockquote>
<p>This article was inspired by <a href="https://medium.com/@jamesfuthey/8ef1f378ee4" target="_blank" rel="external">this</a> one. Many thanks for <a href="https://medium.com/@jamesfuthey" target="_blank" rel="external">James Futhey</a>.</p>
<p>Read the original article to understand the <strong>Whys</strong>.</p>
</blockquote>
<h3 id="You-can-see-the-live-application-here-and-the-source-here"><a href="#You-can-see-the-live-application-here-and-the-source-here" class="headerlink" title="You can see the live application here, and the source here."></a>You can see the live application <a href="https://ember-2-blog.firebaseapp.com/" target="_blank" rel="external">here</a>, and the source <a href="https://github.com/ericdouglas/ember-simple-blog" target="_blank" rel="external">here</a>.</h3><ol>
<li><p>First you need to install <a href="http://www.ember-cli.com/" target="_blank" rel="external">Ember-CLI</a>, that is the command-line interface for building Ember applications.</p>
<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g ember-<span class="keyword">cli</span></div></pre></td></tr></table></figure>
</li>
<li><p>(Optional) Put an alias in your .bashrc:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> e=<span class="string">'ember'</span></div></pre></td></tr></table></figure>
</li>
<li><p>Create a new project with ember-cli: </p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e <span class="keyword">new</span> <span class="type">simple</span>-blog</div></pre></td></tr></table></figure>
</li>
<li><p>Upgrade Ember and Ember Data:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">bower</span> <span class="selector-tag">install</span> <span class="selector-tag">--save</span> <span class="selector-tag">ember</span><span class="selector-id">#2</span><span class="selector-class">.0</span><span class="selector-class">.0</span></div><div class="line"><span class="selector-tag">bower</span> <span class="selector-tag">install</span> <span class="selector-tag">--save</span> <span class="selector-tag">ember-data</span><span class="selector-id">#2</span><span class="selector-class">.0</span><span class="selector-class">.0-beta</span><span class="selector-class">.1</span></div></pre></td></tr></table></figure>
</li>
<li><p>Let’s see if our upgrade was well succeed. Type on terminal:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">e s</span></div></pre></td></tr></table></figure>
<p><strong>ps</strong>: This is an alias to <code>ember serve</code></p>
<p>Now go to <code>localhost:4200</code> to see your Welcome message :)</p>
<p>See what changed in your application <a href="https://github.com/ericdouglas/ember-simple-blog/commit/66f4beffb80caa3556ea75934abc7051094e1800" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Change the structure of your application layout at <code>app/templates/application.hbs</code>:</p>
<figure class="highlight handlebars"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>EmberBlog<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    Simple blog application written with Ember 2.0 and Firebase</span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"></span><span class="template-variable">&#123;&#123;<span class="builtin-name">outlet</span>&#125;&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/commit/8a58597da5217b2ce57f430f7b37fd81e31137f4" target="_blank" rel="external">here</a></p>
</li>
<li><p>Create a Index route</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e g<span class="built_in"> route </span>index</div></pre></td></tr></table></figure>
</li>
<li><p>Add some code in <code>app/templates/index.hbs</code> to verify if everything is working correctly:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Go to <code>localhost:4200</code> to see if <code>Index Page</code> is beign displayed.</p>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/commit/8853729867f7a79ac570513edbbf86d95460d170" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Install the Firebase addon:</p>
<figure class="highlight cmake"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e <span class="keyword">install</span> emberfire</div></pre></td></tr></table></figure>
</li>
<li><p>Create a new app on your <a href="https://www.firebase.com" target="_blank" rel="external">Firebase</a> dashboard. </p>
</li>
<li><p>To connect Firebase to our application, you should edit the file <code>config/environment.js</code> and add on line 8 the name of your Firebase app created in the previously step. Your <code>environment.js</code> file will looks like it:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">environment</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ENV = &#123;</div><div class="line">    modulePrefix: <span class="string">'ember-simple-blog'</span>,</div><div class="line">    environment: environment,</div><div class="line">    contentSecurityPolicy: &#123; <span class="string">'connect-src'</span>: <span class="string">"'self' https://auth.firebase.com wss://*.firebaseio.com"</span> &#125;,</div><div class="line">    firebase: <span class="string">'https://YOUR-APP-NAME.firebaseio.com/'</span>,</div><div class="line">    baseURL: <span class="string">'/'</span>,</div><div class="line">    locationType: <span class="string">'auto'</span>,</div><div class="line">    EmberENV: &#123;</div><div class="line">      FEATURES: &#123;</div><div class="line">        <span class="comment">// Here you can enable experimental features on an ember canary build</span></div><div class="line">        <span class="comment">// e.g. 'with-controller': true</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    APP: &#123;</div><div class="line">      <span class="comment">// Here you can pass flags/options to your application instance</span></div><div class="line">      <span class="comment">// when it is created</span></div><div class="line">    &#125;</div><div class="line">  &#125;;</div></pre></td></tr></table></figure>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/commit/9b0f79eac227cd78d9e4e068bde0646e60f00929" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Create a Post model:</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e g model <span class="built_in">post</span> title:<span class="keyword">string</span> author:<span class="keyword">string</span> createdDate:<span class="built_in">date</span> <span class="keyword">text</span>:<span class="keyword">string</span></div></pre></td></tr></table></figure>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/commit/1c4ff25fda8d3661660dac38eba0723864fc1518" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Edit your Post model to be able to load Ember Data pieces independently. Your <code>app/models/post.js</code> file should looks like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> DS <span class="keyword">from</span> <span class="string">'ember-data'</span>;</div><div class="line"></div><div class="line"><span class="keyword">let</span> &#123;</div><div class="line">  Model,</div><div class="line">  attr</div><div class="line">&#125; = DS;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Model.extend(&#123;</div><div class="line">  title: attr(<span class="string">'string'</span>),</div><div class="line">  author: attr(<span class="string">'string'</span>),</div><div class="line">  createdDate: attr(<span class="string">'date'</span>),</div><div class="line">  text: attr(<span class="string">'string'</span>)</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>ps</strong>: Here we are using a new <strong>ES2015</strong> feature called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" target="_blank" rel="external">Destructuring</a> :D</p>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/commit/97be18a66bd2140f4d6ebe8c9d1f994ece7047ab" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Create a <code>create-new-post</code> component that will be responsible to add new posts to our app. Here we will use the <em>POD</em> structure.</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">e g <span class="string">component </span><span class="built_in">create-new-post</span> <span class="built_in">--pod</span></div></pre></td></tr></table></figure>
</li>
<li><p>Edit the file <code>app/components/create-new-post/template.hbs</code> to insert the necessary elements that we need to create a new post:</p>
<figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Create a new post<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></div><div class="line"><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="built_in">input</span> value=post.title placeholder=<span class="string">"Post title"</span>&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="built_in">input</span> value=post.author placeholder=<span class="string">"Author"</span>&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;<span class="built_in">textarea</span> value=post.text placeholder=<span class="string">"Content"</span>&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span> </span></span><span class="template-variable">&#123;&#123;<span class="built_in">action</span> <span class="string">"createPost"</span> post&#125;&#125;</span><span class="xml"><span class="tag"> <span class="attr">class</span>=<span class="string">"btn btn-submit"</span>&gt;</span>Publish<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>Warning!</strong> If you read the original article, you’ll notice that the logic that I implemented to create the post is different. In our future articles all of it will be thoroughly explained.</p>
</blockquote>
</li>
<li><p>Let’s refactor our Index template and add our component in it. Your <code>app/templates/index.hbs</code> should look like this:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;create-new-post&#125;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Now that we have our HTML structure, let’s add some style to it. Open your <code>app/styles/app.css</code> file and add the following CSS:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  <span class="attribute">font-family</span>: <span class="string">'Roboto'</span>, sans-serif;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">80%</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.container</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">60%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#e74c3c</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2em</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span> &#123;</div><div class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">2em</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">top</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">cursor</span>: pointer;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.btn-submit</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#c0392b</span>;</div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>To load the <code>Roboto</code> font you will need to do two things:</p>
<ul>
<li><p>Add the <code>&lt;link&gt;</code> reference to that font in your <code>app/index.html</code>.</p>
<figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;link <span class="attribute">href</span>=<span class="string">'http://fonts.googleapis.com/css?family=Roboto'</span> <span class="attribute">rel</span>=<span class="string">'stylesheet'</span> <span class="attribute">type</span>=<span class="string">'text/css'</span>&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>Allow that your application load that font from an external resource. To do it, edit your <code>config/environment.js</code> and add the <code>contentSecurityPolicy</code> section in your file. It will look like this:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">environment</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> ENV = &#123;</div><div class="line">    modulePrefix: <span class="string">'ember2-blog'</span>,</div><div class="line">    environment: environment,</div><div class="line">    contentSecurityPolicy: &#123; <span class="string">'connect-src'</span>: <span class="string">"'self' https://auth.firebase.com wss://*.firebaseio.com"</span> &#125;,</div><div class="line">    firebase: <span class="string">'https://firember2-blog.firebaseio.com/'</span>,</div><div class="line">    baseURL: <span class="string">'/'</span>,</div><div class="line">    locationType: <span class="string">'auto'</span>,</div><div class="line">    EmberENV: &#123;</div><div class="line">      FEATURES: &#123;</div><div class="line">        <span class="comment">// Here you can enable experimental features on an ember canary build</span></div><div class="line">        <span class="comment">// e.g. 'with-controller': true</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">  APP: &#123;</div><div class="line">    <span class="comment">// Here you can pass flags/options to your application instance</span></div><div class="line">    <span class="comment">// when it is created</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  contentSecurityPolicy: &#123;</div><div class="line">    <span class="string">'font-src'</span>: <span class="string">"'self' data: fonts.gstatic.com"</span>,</div><div class="line">    <span class="string">'style-src'</span>: <span class="string">"'self' 'unsafe-inline' fonts.googleapis.com"</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/pull/9" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Add an action to our <code>create-new-post</code> component. Your <code>app/components/create-new-post/component.js</code> should look like this:</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember from <span class="string">'ember'</span>;</div><div class="line"></div><div class="line">export <span class="keyword">default</span> Ember.Component.extend(&#123;</div><div class="line">  actions: &#123;</div><div class="line">    createPost(post) &#123;</div><div class="line">      <span class="keyword">this</span>.sendAction(<span class="string">'createPost'</span>, post);</div><div class="line">      <span class="keyword">this</span>.<span class="keyword">set</span>(<span class="string">'post'</span>, &#123;&#125;);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Refactor our Index Route to handle the <code>createPost</code> method and effectively create a post. We will also add the logic necessary to return all posts that have been created. Edit the file <code>app/routes/index.js</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Ember <span class="keyword">from</span> <span class="string">'ember'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> Ember.Route.extend(&#123;</div><div class="line">  model() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      data: <span class="keyword">this</span>.store.findAll(<span class="string">'post'</span>),</div><div class="line">      post: &#123;&#125;</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  actions: &#123;</div><div class="line">    createPost(info) &#123;</div><div class="line">      <span class="keyword">let</span> newPost = <span class="keyword">this</span>.store.createRecord(<span class="string">'post'</span>, &#123;</div><div class="line">        title: info.title,</div><div class="line">        text: info.text,</div><div class="line">        author: info.author,</div><div class="line">        createdDate: <span class="keyword">new</span> <span class="built_in">Date</span>()</div><div class="line">      &#125;);</div><div class="line"></div><div class="line">      newPost.save();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>Passing data to our component in Index template. Edit the file <code>app/templates/index.hbs</code>:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;&#123;<span class="built_in">create-new-post</span> <span class="string">post=</span><span class="string">model.</span><span class="string">post </span><span class="string">createPost=</span><span class="string">"createPost"</span>&#125;&#125;</div></pre></td></tr></table></figure>
<p>Now if you submit your form and look in your Firebase dashboard, you will be able to see that your post was created! Amazing! ;D</p>
<p>We did a lot of things, wow! See all the commits that was done <a href="https://github.com/ericdouglas/ember-simple-blog/pull/6" target="_blank" rel="external">here</a>.</p>
</li>
<li><p>Now that we are able to create our post, we need to show it! Let’s create a component for that purpose. Run the following command:</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">e g component blog-post</span></div></pre></td></tr></table></figure>
</li>
<li><p>Add the structure to our blog-post component. The file <code>app/templates/components/blog-post.hbs</code> should look like this:</p>
<figure class="highlight django"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><span class="template-variable">&#123;&#123;post.title&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123;post.text&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></div><div class="line"><span class="xml">  <span class="tag">&lt;<span class="name">em</span>&gt;</span>(Posted on </span><span class="template-variable">&#123;&#123;post.createdDate&#125;&#125;</span><span class="xml"> by </span><span class="template-variable">&#123;&#123;post.author&#125;&#125;</span><span class="xml">)<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>Let’s refactor the Index template to list all articles that you have in your Firebase database. The file <code>app/templates/index.hbs</code> should now look like this:</p>
<figure class="highlight htmlbars"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span></div><div class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;#<span class="name"><span class="builtin-name">each</span></span> model.data <span class="keyword">as</span> |post|&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123;blog-post post=post&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;/<span class="name"><span class="builtin-name">each</span></span>&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></div><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span></div><div class="line"><span class="xml">  </span><span class="template-tag">&#123;&#123;#<span class="name">create-new-post</span> <span class="attr">post</span>=model.post <span class="attr">createPost</span>=<span class="string">"createPost"</span>&#125;&#125;</span><span class="xml"></span><span class="template-tag">&#123;&#123;/<span class="name">create-new-post</span>&#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p><strong>Awesome</strong>!!! Now, if you followed all the steps correctly, you should be able to see all your posts and to create new ones too!</p>
<p>See what changed <a href="https://github.com/ericdouglas/ember-simple-blog/pull/8" target="_blank" rel="external">here</a>.</p>
</li>
</ol>
<p><strong>We are almost done!</strong> Our application is working correctly, and now we need to deploy it. Go to <a href="https://medium.com/@jamesfuthey/8ef1f378ee4" target="_blank" rel="external">this</a> article and follow the instructions in the section “<strong>Deploying our Application</strong>“.</p>
<h3 id="And-that’s-it"><a href="#And-that’s-it" class="headerlink" title="And that’s it!"></a>And that’s it!</h3><p>I hope that you enjoy to build that simple but functional application with Ember 2.0!</p>
<p>Cheers! =)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://i.imgur.com/cduds4J.jpg&quot; alt=&quot;Getting Started with Ember 2.0&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this &lt;em&gt;checklist-like&lt;/em&gt; article, we will c
    
    </summary>
    
    
      <category term="ember" scheme="http://ericdouglas.github.io/tags/ember/"/>
    
  </entry>
  
</feed>
